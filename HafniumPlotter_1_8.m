function varargout = HafniumPlotter_1_8(varargin)
gui_Singleton = 1;
gui_State = struct('gui_Name', mfilename,'gui_Singleton',  gui_Singleton,'gui_OpeningFcn', @HafniumPlotter_1_8_OpeningFcn,'gui_OutputFcn',  @HafniumPlotter_1_8_OutputFcn, ...
                   'gui_LayoutFcn',  [] ,'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end

function HafniumPlotter_1_8_OpeningFcn(hObject, eventdata, H, varargin)
H.output = hObject;
view([-15, 40]);
set(H.d3,'Value',1)
plot_Callback(hObject, eventdata, H)
guidata(hObject, H);

function varargout = HafniumPlotter_1_8_OutputFcn(hObject, eventdata, H) 
varargout{1} = H.output;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PUSH BUTTONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function uploaddata_Callback(hObject, eventdata, H)
[filename pathname] = uigetfile({'*'},'File Selector');
data = readtable(char(strcat(pathname, filename)));
data = table2array(data);
set(H.uitable1, 'Data', data);
data = get(H.uitable1, 'Data');
plot_Callback(hObject, eventdata, H)

function set_Callback(hObject, eventdata, H)
az = get(H.axes1, 'View');
set(H.azim,'String',round(az(1,1),1));
set(H.elev,'String',round(az(1,2),1));

function res_Callback(hObject, eventdata, H)
view([-15, 40]);
plot_Callback(hObject, eventdata, H)

function FAQs_Callback(hObject, eventdata, H)
Hafnium_Plotter_FAQs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MAIN FUNCTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function plot_Callback(hObject, eventdata, H)

az = get(H.axes1, 'View');

data_tmp = get(H.uitable1, 'Data');

cla(H.axes1, 'reset');

if iscell(data_tmp) == 1
	data_tmp = cell2num(data_tmp);
end

for i = 1:length(data_tmp(:,1))
	if data_tmp(i,1) >= str2double(get(H.xmin,'String')) && data_tmp(i,1) <= str2double(get(H.xmax,'String'))
		data(i,:) = data_tmp(i,:);
	end
end

data = data(any(data ~= 0,2),:);

cla(H.axes1, 'reset');

global botev
global bandwidth_x
global bandwidth_y
global bandwidth_opt

rad_on=get(H.ui_bandwidth,'selectedobject');
switch rad_on
	case H.optimized
		botev = 1;
	case H.setbandwidth
		botev = 0;
bandwidth_x = str2double(get(H.setMyr,'String'));
bandwidth_y = str2double(get(H.set_eHf,'String'));
end

gridspc = 2^9;
MIN_XY=[str2double(get(H.xmin,'String')),str2double(get(H.ymin,'String'))];
MAX_XY=[str2double(get(H.xmax,'String')),str2double(get(H.ymax,'String'))];

[bandwidth,density,X,Y]=kde2d(data, gridspc, MIN_XY, MAX_XY);
density = density./sum(sum(density));

set(H.opt_Myr, 'String', round(bandwidth_opt(1,1),2));
set(H.opt_eHf, 'String', round(bandwidth_opt(1,2),2));

axes(H.axes1);
%legend(H.axes1, 'off'); 
hold on

%Colormaps

% Colormaps viridis, inferno, magma, plasma, and fake parula author info:
% Copyright (c) 2016, Ander Biguri
% All rights reserved.
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
% * Redistributions of source code must retain the above copyright notice, this
%   list of conditions and the following disclaimer.
% * Redistributions in binary form must reproduce the above copyright notice,
%   this list of conditions and the following disclaimer in the documentation
%   and/or other materials provided with the distribution
% * Neither the name of  nor the names of its
%   contributors may be used to endorse or promote products derived from this
%   software without specific prior written permission.
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
% FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
% DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
% OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

viridis = [0.267004010000000,0.00487432999999996,0.329415190000000;0.270724607511462,0.0176652160512586,0.344769972121212;0.273978467617639,0.0324335566589644,0.359714782727273;0.276740111256717,0.0486435361030842,0.374200790909091;0.279019684443310,0.0638558833388514,0.388205733939394;0.280814765409863,0.0782353984940852,0.401703264242424;0.282100725961245,0.0920580901280188,0.414649596363636;0.282915170452919,0.105548531616562,0.427042981515152;0.283209472957882,0.118759488999863,0.438823438181818;0.283033163562756,0.131803230808035,0.450002373636364;0.282364813092189,0.144697446807648,0.460542025151515;0.281222468595490,0.157473495160734,0.470433883333333;0.279632529600785,0.170150606353514,0.479678647272727;0.277575440232598,0.182717942222353,0.488249160606061;0.275123881872254,0.195196027728210,0.496181027272727;0.272243952984566,0.207559367368487,0.503447450000000;0.269013522013221,0.219818500459145,0.510092578181818;0.265438240370107,0.231957578751491,0.516121900000000;0.261551797955654,0.243968561436998,0.521561309090909;0.257417641472282,0.255851268558595,0.526452578787879;0.253040011607521,0.267570556865835,0.530805076666667;0.248464280468145,0.279175713642699,0.534681548181818;0.243734112883201,0.290606940928501,0.538097133333333;0.238884953989729,0.301899364460921,0.541105172727273;0.233953081171962,0.313038496125541,0.543737825454545;0.228976889614729,0.324018317807404,0.546031593939394;0.223983970748479,0.334865848570125,0.548030504545455;0.219006453767903,0.345547358694835,0.549753681818182;0.214067141455560,0.356107986631125,0.551248122424243;0.209193388419200,0.366525080091998,0.552532920606061;0.204401172379751,0.376822958111392,0.553639791818182;0.199703752908650,0.387006740038878,0.554589377272727;0.195113567402670,0.397077295560826,0.555398793636364;0.190631350000000,0.407061480000000,0.556089070000000;0.186266651073365,0.416942806319376,0.556665632121212;0.182009290976797,0.426755840949686,0.557144662121212;0.177858279216527,0.436494845690706,0.557528030000000;0.173802513136880,0.446175679978607,0.557820390303030;0.169831254900564,0.455807900792392,0.558022376363636;0.165935264912133,0.465392766689553,0.558129257272727;0.162096794125451,0.474949940448296,0.558138912121212;0.158306335670090,0.484473155679030,0.558036842424243;0.154551121588504,0.493981332906598,0.557818586363636;0.150825589446228,0.503473668805633,0.557467898181818;0.147131503408444,0.512956834459261,0.556973310000000;0.143471883829899,0.522437469463666,0.556320082727273;0.139862368281972,0.531913801618953,0.555483802727273;0.136327055249074,0.541395208830542,0.554455854848485;0.132916109831062,0.550875736269022,0.553208389090909;0.129679700141859,0.560362949393940,0.551736992922043;0.126691849933974,0.569851652424243,0.550000353976397;0.124058384694146,0.579341890000000,0.547991088483562;0.121878703847449,0.588831927575758,0.545681957450192;0.120322967444783,0.598318657878788,0.543063654656023;0.119504013694763,0.607798205454545,0.540108020815272;0.119627227014187,0.617265840000000,0.536802622929029;0.120817955131498,0.626716594242424,0.533125824595036;0.123237555331950,0.636144222727273,0.529064063047073;0.127018218626169,0.645541919090909,0.524597827878853;0.132201029923855,0.654903652121212,0.519720218479327;0.138902195101824,0.664219406363636,0.514402555647879;0.147042899636700,0.673483826666667,0.508651464152217;0.156648777557568,0.682685910606061,0.502437033673954;0.167624510253113,0.691818275454545,0.495761624741298;0.179901071494507,0.700871520000000,0.488616629927191;0.193409820304154,0.709834368787879,0.480975065451614;0.208030450000000,0.718700950000000,0.472873300000000;0.223729647943914,0.727454405151515,0.464232692803522;0.240385167388249,0.736091528484848,0.455123515112494;0.257953957698864,0.744596916363637,0.445490568609760;0.276364167849942,0.752962188181818,0.435351996909506;0.295560058617270,0.761177489090909,0.424720298554597;0.315502049910523,0.769227506363637,0.413536087136257;0.336132751905684,0.777109131818182,0.401902830364368;0.357432723751875,0.784800756969697,0.389668672499225;0.379187624631023,0.792301949090909,0.376892663178523;0.401819548310649,0.799596016060606,0.363818228329961;0.424885391739474,0.806673890000000,0.350103656442721;0.448511278088871,0.813529260000000,0.335893595584377;0.472586220217279,0.820144256666667,0.321189578778901;0.497189866132354,0.826522383333333,0.306013238427748;0.522176081687851,0.832642349090909,0.290368248699914;0.547608085241283,0.838509068787879,0.274283322771435;0.573399871636692,0.844112580606061,0.257788365171587;0.599513835161838,0.849450267272727,0.240926674122160;0.625947092886084,0.854528077878788,0.223759524235073;0.652570828837514,0.859336903636364,0.206372684144584;0.679428057477040,0.863897171818182,0.188888178715576;0.706375667487402,0.868206316666667,0.171497874246839;0.733413255380740,0.872287558787879,0.154463130733397;0.760450702191504,0.876156194545455,0.138186779876540;0.787409001675806,0.879833884545455,0.123280196660836;0.814259177906714,0.883352472727273,0.110486942363159;0.840870545180796,0.886734702727273,0.101041357644058;0.867241812961043,0.890020479696970,0.0958677673730973;0.895124113939394,0.895095662468121,0.0960436694934357;0.918932211818182,0.896442206000830,0.101626697171734;0.944161741818182,0.899632578395113,0.112119840357606;0.968933641515152,0.902867128076890,0.126590331216594;0.993247890000000,0.906156570000000,0.143936200000000];
inferno = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00399889256167163,0.00287953184509436,0.0280794670818182;0.00795127879887381,0.00636563464942455,0.0480946763272727;0.0133413427376349,0.0107186192562840,0.0695702669090909;0.0202832010103144,0.0157475324348777,0.0913609393696970;0.0289795978504996,0.0212350138796010,0.113567813696970;0.0397217191413972,0.0269214611172503,0.136281385727273;0.0517865237979150,0.0325367550978278,0.159531830393939;0.0643437732434502,0.0377498532623961,0.183290302909091;0.0775923173844421,0.0421673192071302,0.207524301636364;0.0916216500755484,0.0453405008822348,0.232043876727273;0.106525154463262,0.0471492247152560,0.256590945000000;0.122331601345294,0.0475439738839218,0.280778409363636;0.138952211477325,0.0465727258510071,0.304031679636364;0.156258364334311,0.0445007623305026,0.325819520909091;0.173954939579936,0.0418067727716278,0.345479181272727;0.191823551203119,0.0391204811163078,0.362738271909091;0.209622894155016,0.0371601549561695,0.377433568575758;0.227214636395263,0.0364060934405600,0.389682109818182;0.244558945419825,0.0370281786609092,0.399785207303030;0.261615682280493,0.0391236431060528,0.407958540515152;0.278437295327159,0.0424958887899517,0.414593538272727;0.295039349061702,0.0468596811613591,0.419873028000000;0.311475148430300,0.0519108275519758,0.424059248212121;0.327775155288748,0.0574270105178404,0.427304422909091;0.343975108835925,0.0632265730802830,0.429736606212121;0.360095711996609,0.0691767069549141,0.431479396181818;0.376175208151901,0.0751898579699384,0.432574307181818;0.392210841091546,0.0812091009414445,0.433117718636364;0.408237495148001,0.0871944887397472,0.433122440848485;0.424255000660395,0.0931259107413702,0.432631369818182;0.440264663545455,0.0989921803825824,0.431671557501847;0.456291102666667,0.104795933940443,0.430239227656651;0.472328255000000,0.110546584000000,0.428334320000000;0.488378092787879,0.116241601262343,0.425991582139122;0.504437674212121,0.121906642029904,0.423182870705644;0.520504280000000,0.127551450310552,0.419926708425463;0.536572723909091,0.133197548810781,0.416212802087094;0.552635898333333,0.138866077566695,0.412039314016187;0.568684763818182,0.144578822918171,0.407414276231730;0.584709655727273,0.150362237949872,0.402323007199250;0.600696829181818,0.156242241454892,0.396784358637823;0.616634938454546,0.162246280013946,0.390783833411482;0.632506746727273,0.168404831523849,0.384336677113617;0.648296214666667,0.174747877792274,0.377445191416445;0.663987527818182,0.181304165317645,0.370113176077319;0.679555909909091,0.188110937602704,0.362360175938572;0.694987324636364,0.195192406546200,0.354191497382138;0.710252113727273,0.202588963435991,0.345624853417491;0.725334360363636,0.210323296834924,0.336673126836953;0.740205661636364,0.218429642432735,0.327358989628286;0.754840583909091,0.226936239596084,0.317701515291581;0.769219910848485,0.235862706073157,0.307723391693835;0.783304905030303,0.245244335555584,0.297441438148676;0.797085648090909,0.255085905613756,0.286885476851085;0.810519941000000,0.265417765448960,0.276073292872144;0.823594678545454,0.276225169086520,0.265040926797981;0.836280707909091,0.287556432055558,0.253792009268985;0.848550357454545,0.299387738449111,0.242356636167536;0.860395631575758,0.311742348508969,0.230744085287119;0.871771440909091,0.324575256603181,0.218981812084315;0.882686740242424,0.337919951110913,0.207066184040693;0.893103441484849,0.351732717214752,0.195013810306050;0.903020608727273,0.366016598725349,0.182820715969609;0.912424088545455,0.380750244661433,0.170486123016767;0.921294013696970,0.395903261243756,0.158005952723798;0.929644083000000,0.411479007000000,0.145366973000000;0.937433156060606,0.427417913184157,0.132564472617524;0.944690633606061,0.443735751668869,0.119586014602270;0.951389878727273,0.460386443664994,0.106433454812169;0.957537507242424,0.477359614069479,0.0931232849673625;0.963133260303030,0.494637272873435,0.0797067075468474;0.968159191818182,0.512184479207010,0.0663110878697415;0.972638410878788,0.530008165941668,0.0531745184693875;0.976534780424243,0.548059957076380,0.0408510427419464;0.979876342000000,0.566352246795761,0.0308821177071040;0.982641682969697,0.584853337635102,0.0250467039957242;0.984832270333333,0.603554919452185,0.0238048668232048;0.986452054636364,0.622436923740861,0.0276118693981342;0.987475419090909,0.641499284824589,0.0373252497034655;0.987927448363636,0.660706037272013,0.0521490646874560;0.987771853181818,0.680074857919662,0.0698596082992870;0.987032646575758,0.699564242980266,0.0894210735178051;0.985694969818182,0.719173813683700,0.110455141280859;0.983755442818182,0.738892131846950,0.132774444135988;0.981237396757576,0.758672996544754,0.156300248333453;0.978131988757576,0.778541102518789,0.181133500951378;0.974496941727273,0.798402075176654,0.207291984802552;0.970344704666667,0.818284067764030,0.235014386250955;0.965794427787879,0.838073446406604,0.264412724627449;0.960969383363636,0.857711851608518,0.295747752853543;0.956110448515152,0.877103565575226,0.329299218234636;0.951596796727273,0.896011057906944,0.365195702069798;0.948089375181818,0.914303405623325,0.403680602262447;0.946392919636364,0.931557123825968,0.444334021071604;0.948585717757576,0.948502090319137,0.486431112269774;0.952486759820053,0.962034649818182,0.528595221457009;0.961213816431732,0.975178648424242,0.569545808080956;0.973433921233276,0.987179065969697,0.608337748116230;0.988362068000000,0.998364143000000,0.644924005000000];
magma = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00396963249787467,0.00295782740809874,0.0273104854393939;0.00785667780827875,0.00659792290147526,0.0461656953848485;0.0130792148733772,0.0112257533463670,0.0665074171272727;0.0196678017616254,0.0167072290056517,0.0870164943363636;0.0277090244894271,0.0228930878425070,0.107803754121212;0.0373537945495923,0.0296086745430926,0.128984709181818;0.0481884228949725,0.0366903137309453,0.150584990090909;0.0592262029289913,0.0437513428509191,0.172708162909091;0.0705722209499949,0.0501428903038421,0.195357867272727;0.0823131585145148,0.0557324419696763,0.218552009545455;0.0945649101113795,0.0604522303538439,0.242268000000000;0.107431830934813,0.0642175434689971,0.266431248181818;0.121020864821821,0.0668858746509098,0.290955213575758;0.135401060496669,0.0684102316624284,0.315577935454545;0.150619874761647,0.0686866003912929,0.339988689636364;0.166652661838188,0.0677916481367519,0.363715844393939;0.183388711792418,0.0659198419727293,0.386174706333333;0.200615203661423,0.0635238948216726,0.406738160272727;0.218095535739107,0.0612106484662445,0.424983023575758;0.235538370813556,0.0597007801980943,0.440559594636364;0.252820013054710,0.0594413931672472,0.453653383090909;0.269804305426194,0.0607408574690535,0.464387015666667;0.286502645903444,0.0635024394392208,0.473180894515151;0.302926383510630,0.0675218434699115,0.480344646545455;0.319113780189581,0.0725120341052126,0.486179326272727;0.335119903520351,0.0781672729642440,0.490971497090909;0.350985666787874,0.0842682619994275,0.494873744636364;0.366753349184250,0.0906170005373253,0.498092491848485;0.382457941431308,0.0970895571224863,0.500718510666667;0.398129294542111,0.103588151949924,0.502856182090909;0.413790436524552,0.110051807845278,0.504569460424242;0.429467150565459,0.116438271726955,0.505902878606061;0.445163096000000,0.122724371000000,0.506900806000000;0.460918625430740,0.128886954465657,0.507565488848485;0.476716010820867,0.134928050278637,0.507931392393940;0.492582630743639,0.140841429406746,0.507994081727273;0.509329079090909,0.146629607480763,0.508589300873485;0.524515405212121,0.152303606109150,0.507229873618836;0.540600729000000,0.157865121373464,0.506389106044112;0.556761543121212,0.163332659090695,0.505215850620604;0.573001300727273,0.168711800038572,0.503733280014819;0.589312913545455,0.174024612022161,0.501900266237818;0.605693982333333,0.179285374176889,0.499722099447472;0.622137057333333,0.184515265025090,0.497181812713551;0.638632839454546,0.189736741408806,0.494262267333334;0.655171937909091,0.194975290837411,0.490967534760319;0.671739381787879,0.200258508592035,0.487267801485588;0.688320409818182,0.205620901746345,0.483174961564414;0.704895679272727,0.211095652046855,0.478666168427356;0.721443969454546,0.216724165127206,0.473743098652091;0.737938515181818,0.222552794269508,0.468404760588146;0.754351323212121,0.228626973857886,0.462649703560083;0.770641950181818,0.235014275617009,0.456495758558116;0.786777335636364,0.241761787433362,0.449946841969349;0.802703594000000,0.248952518583233,0.443025054841077;0.818371546242424,0.256649484421971,0.435766306215733;0.833717167454546,0.264936247977841,0.428215469664703;0.848665468181818,0.273901792686467,0.420430368284165;0.863151987090909,0.283611269949446,0.412496955352519;0.877060488545455,0.294181815349183,0.404521639185233;0.890333693878788,0.305646093513659,0.396635975927565;0.902848141545455,0.318093093463582,0.389011620477855;0.914536298545455,0.331534161396806,0.381834800851296;0.925323023969697,0.345970754366781,0.375319978264204;0.935139844303030,0.361375304989207,0.369690039320443;0.944006448000000,0.377642889000000,0.365136328000000;0.951873471606061,0.394691302771497,0.361876665974739;0.958840615666667,0.412380228926801,0.359956421221783;0.964938695545455,0.430569882156238,0.359513108288860;0.970256725848485,0.449137421949103,0.360529004573765;0.974876232818182,0.467970515953116,0.362972209805602;0.978862331545455,0.486976844361431,0.366823367427078;0.982315711363636,0.506076211231413,0.371944633729994;0.985271162848485,0.525221572274520,0.378317349457379;0.987807335272727,0.544368653518903,0.385782917665487;0.989950356151515,0.563500450610526,0.394284979665672;0.991770686000000,0.582576935977516,0.403726455418414;0.993276389000000,0.601606130700794,0.414016148522486;0.994516603212121,0.620570178810127,0.425105381646187;0.995500435969697,0.639471906086101,0.436895180786394;0.996252059454545,0.658319055920175,0.449360950421359;0.996806738575758,0.677093558559539,0.462419504421512;0.997163117363636,0.695815596806649,0.476042482444242;0.997334562909091,0.714491410452500,0.490190810638697;0.997341824090909,0.733109808085957,0.504819031935832;0.997182061575758,0.751707754118951,0.519922922213019;0.996882672909091,0.770250806213677,0.535451177833651;0.996436258333333,0.788784593695108,0.551410576685972;0.995871274424242,0.807280515735869,0.567764062926975;0.995184503454545,0.825758484186287,0.584508787891694;0.994404788484849,0.844225426240777,0.601627866275212;0.993554996575758,0.862645005470651,0.619092775521772;0.992617645545455,0.881101684326737,0.636922755508793;0.991644614909091,0.899505148501783,0.655063315008503;0.990678935515152,0.917915809762457,0.673495346953656;0.989710901818182,0.936308315019579,0.692195255568149;0.988771666121212,0.954683151382698,0.711124451497506;0.987887716454545,0.973094593288114,0.730242033067517;0.987052509000000,0.991437853000000,0.749504188000000];
plasma = [0.0503832136000000,0.0298028976000000,0.527974883000000;0.0815823807877956,0.0265867041616092,0.540684671000000;0.107355169340663,0.0241960396818818,0.551989044484848;0.130055959529551,0.0224284389385021,0.562206488000000;0.150963769899172,0.0210020183647598,0.571623448878788;0.170659552102410,0.0197629613348841,0.580402518363636;0.189458576380101,0.0185996376756421,0.588637794181818;0.207643102940095,0.0174279699606346,0.596421397545455;0.225301872688235,0.0162007630133308,0.603770644212121;0.242598378265279,0.0148813508620481,0.610733389727273;0.259588036546517,0.0134472741785156,0.617307058212121;0.276337220269479,0.0119025077210060,0.623494091333333;0.292893648330705,0.0102714993782007,0.629290897727273;0.309274715702800,0.00858101792647744,0.634666541757576;0.325529158909198,0.00687539827389696,0.639621313000000;0.341650564862912,0.00521919672377208,0.644106100818182;0.357670324457706,0.00368037854366705,0.648114138151515;0.373587164644139,0.00234681952524928,0.651605264818182;0.389405956422400,0.00131800879488230,0.654548395181818;0.405133198647192,0.000689094521384467,0.656926097757576;0.420755875278142,0.000606100905319985,0.658681816363636;0.436278993165460,0.00116457098773206,0.659821798090909;0.451690623877970,0.00252963535096137,0.660286766333333;0.466983921357964,0.00481978013088795,0.660080674393939;0.482146201834980,0.00819085131002113,0.659177593000000;0.497168732943481,0.0128039450697855,0.657558703424243;0.512032716574328,0.0187575817324091,0.655239315090909;0.526738848006019,0.0262870398582799,0.652183564090909;0.541253177578868,0.0354365503833947,0.648442118424242;0.555581760485189,0.0460623636178491,0.643999015151515;0.569697622830225,0.0569398273251149,0.638896913000000;0.583589396308280,0.0679321395407872,0.633162289818182;0.597263474449149,0.0790301880894014,0.626824595757576;0.610667469000000,0.0902039303000000,0.619950811000000;0.623836675181818,0.101447557584133,0.612560080838201;0.636757831030303,0.112755522437882,0.604730476067744;0.649416458363636,0.124101192641246,0.596504589747760;0.661815243878788,0.135478908455582,0.587944691745968;0.673955190303030,0.146879660768836,0.579108238920008;0.685831136727273,0.158286789168903,0.570042708688667;0.697458333757576,0.169706894882675,0.560808730453804;0.708826776060606,0.181117753758607,0.551441117489391;0.719956296272727,0.192531302993559,0.541992432847761;0.730846036333333,0.203936499160041,0.532493983337734;0.741505738666667,0.215334650515528,0.522982180953011;0.751946522090909,0.226729739332939,0.513482869792766;0.762168657242424,0.238114989727708,0.504011282879754;0.772190498181818,0.249504237740860,0.494591589945520;0.782008446181818,0.260888390328339,0.485230372282859;0.791638609000000,0.272281431303064,0.475941595252205;0.801082810515152,0.283683906874827,0.466724084059951;0.810346632454545,0.295101291752511,0.457579992809514;0.819438717242424,0.306542173393512,0.448517266689175;0.828354612848485,0.318007145711176,0.439516850465082;0.837106149636364,0.329510637411159,0.430589153422853;0.845686518333333,0.341052140294506,0.421717568715355;0.854101781787879,0.352644734685166,0.412901697651499;0.862348915545455,0.364293805375540,0.404131887770853;0.870424443666667,0.376006253633586,0.395397204434765;0.878330569363636,0.387592346112036,0.386501689843391;0.886053636545455,0.399640114467872,0.378028082854842;0.893598925060606,0.411605256867961,0.369362060525727;0.900951841666667,0.423648956320469,0.360708674866815;0.908110384000000,0.435804736705972,0.352056236356083;0.915065908454545,0.448074507504643,0.343400955948958;0.921805652030303,0.460453173834215,0.334741039051357;0.928329275000000,0.472975465000000,0.326066550000000;0.934612544121212,0.485606184423229,0.317385904391242;0.940659125666667,0.498392429028170,0.308685672625678;0.946448815909091,0.511314420914924,0.299973503727936;0.951975104242424,0.524387760112599,0.291248773002625;0.957226451212121,0.537620043783125,0.282508460022751;0.962184404090909,0.551001532800762,0.273763441238937;0.966850808454545,0.564555761913269,0.265015037698232;0.971192722696970,0.578262908971352,0.256269885881504;0.975216415454546,0.592146646516460,0.247536698277106;0.978899223575758,0.606196083659726,0.238832215174876;0.982230840666667,0.620416963499396,0.230171497594631;0.985200593090909,0.634816659486345,0.221567957914143;0.987781899242424,0.649384314469667,0.213056392841293;0.989980536060606,0.664134812298712,0.204664041574770;0.991759461636364,0.679054050392784,0.196443526629633;0.993121761575758,0.694154252342995,0.188439001779935;0.994041833030303,0.709429736461378,0.180722256300012;0.994502779818182,0.724880985557720,0.173377462450791;0.994498941575758,0.740509760647437,0.166492641839155;0.993991486363636,0.756309810346189,0.160212905824302;0.992985247636364,0.772286712379486,0.154629980669400;0.991438210000000,0.788435499056204,0.149931542862865;0.989359350090909,0.804749959302527,0.146244864397980;0.986711400727273,0.821233241660880,0.143703110258317;0.983488164848485,0.837877046489316,0.142439453351283;0.979690508272727,0.854668834730875,0.142448146001543;0.975271192090909,0.871625557374025,0.143738785611683;0.970279664727273,0.888707868358415,0.146051808241278;0.964702926090909,0.905927564523120,0.149010339993564;0.958602670181818,0.923253649231005,0.151796687168694;0.952114072393939,0.940649752191961,0.152924869273177;0.945590474366293,0.958043580545455,0.148864760271971;0.940015097000001,0.975158357000000,0.131325517000000];
fake_parula = [0.208100000000000,0.166300000000000,0.529200000000000;0.211623809500000,0.189780952400000,0.577676190500000;0.212252381000000,0.213771428600000,0.626971428600000;0.208100000000000,0.238600000000000,0.677085714300000;0.195904761900000,0.264457142900000,0.727900000000000;0.170728571400000,0.291938095200000,0.779247619000000;0.125271428600000,0.324242857100000,0.830271428600000;0.0591333333000000,0.359833333300000,0.868333333300000;0.0116952381000000,0.387509523800000,0.881957142900000;0.00595714290000000,0.408614285700000,0.882842857100000;0.0165142857000000,0.426600000000000,0.878633333300000;0.0328523810000000,0.443042857100000,0.871957142900000;0.0498142857000000,0.458571428600000,0.864057142900000;0.0629333333000000,0.473690476200000,0.855438095200000;0.0722666667000000,0.488666666700000,0.846700000000000;0.0779428571000000,0.503985714300000,0.838371428600000;0.0793476190000000,0.520023809500000,0.831180952400000;0.0749428571000000,0.537542857100000,0.826271428600000;0.0640571429000000,0.556985714300000,0.823957142900000;0.0487714286000000,0.577223809500000,0.822828571400000;0.0343428571000000,0.596580952400000,0.819852381000000;0.0265000000000000,0.613700000000000,0.813500000000000;0.0238904762000000,0.628661904800000,0.803761904800000;0.0230904762000000,0.641785714300000,0.791266666700000;0.0227714286000000,0.653485714300000,0.776757142900000;0.0266619048000000,0.664195238100000,0.760719047600000;0.0383714286000000,0.674271428600000,0.743552381000000;0.0589714286000000,0.683757142900000,0.725385714300000;0.0843000000000000,0.692833333300000,0.706166666700000;0.113295238100000,0.701500000000000,0.685857142900000;0.145271428600000,0.709757142900000,0.664628571400000;0.180133333300000,0.717657142900000,0.642433333300000;0.217828571400000,0.725042857100000,0.619261904800000;0.258642857100000,0.731714285700000,0.595428571400000;0.302171428600000,0.737604761900000,0.571185714300000;0.348166666700000,0.742433333300000,0.547266666700000;0.395257142900000,0.745900000000000,0.524442857100000;0.442009523800000,0.748080952400000,0.503314285700000;0.487123809500000,0.749061904800000,0.483976190500000;0.530028571400000,0.749114285700000,0.466114285700000;0.570857142900000,0.748519047600000,0.449390476200000;0.609852381000000,0.747314285700000,0.433685714300000;0.647300000000000,0.745600000000000,0.418800000000000;0.683419047600000,0.743476190500000,0.404433333300000;0.718409523800000,0.741133333300000,0.390476190500000;0.752485714300000,0.738400000000000,0.376814285700000;0.785842857100000,0.735566666700000,0.363271428600000;0.818504761900000,0.732733333300000,0.349790476200000;0.850657142900000,0.729900000000000,0.336028571400000;0.882433333300000,0.727433333300000,0.321700000000000;0.913933333300000,0.725785714300000,0.306276190500000;0.944957142900000,0.726114285700000,0.288642857100000;0.973895238100000,0.731395238100000,0.266647619000000;0.993771428600000,0.745457142900000,0.240347619000000;0.999042857100000,0.765314285700000,0.216414285700000;0.995533333300000,0.786057142900000,0.196652381000000;0.988000000000000,0.806600000000000,0.179366666700000;0.978857142900000,0.827142857100000,0.163314285700000;0.969700000000000,0.848138095200000,0.147452381000000;0.962585714300000,0.870514285700000,0.130900000000000;0.958871428600000,0.894900000000000,0.113242857100000;0.959823809500000,0.921833333300000,0.0948380952000000;0.966100000000000,0.951442857100000,0.0755333333000000;0.976300000000000,0.983100000000000,0.0538000000000000];

% cmocean colormaps author info: 
% This function was written by Chad A. Greene of the Institute for Geophysics at the 
% University of Texas at Austin (UTIG), June 2016, using colormaps created by Kristen
% Thyng of Texas A&M University, Department of Oceanography. More information on the
% cmocean project can be found at http://matplotlib.org/cmocean/. 
% Citing this colormap: 
% If you find an occasion to cite these colormaps for any reason, or if you just want
% some nice beach reading, check out the following paper from the journal Oceanography: 
% Thyng, K.M., C.A. Greene, R.D. Hetland, H.M. Zimmerle, and S.F. DiMarco. 2016. True 
% colors of oceanography: Guidelines for effective and accurate colormap selection. 
% Oceanography 29(3):9?13, http://dx.doi.org/10.5670/oceanog.2016.66.
% MIT License
% Copyright (c) 2021 Chad Greene
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%colormaps
% cmap = cmocean('ColormapName') returns a 256x3 colormap. ColormapName can be any of
% of the following:
%
%          SEQUENTIAL:                DIVERGING:
%          'thermal'                  'balance'
%          'haline'                   'delta'
%          'solar'                    'curl'
%          'ice'                      'diff'
%          'gray'                     'tarn'
%          'oxy'
%          'deep'                     CONSTANT LIGHTNESS:
%          'dense'                    'phase'
%          'algae'
%          'matter'                   OTHER:
%          'turbid'                   'topo'
%          'speed'
%          'amp'
%          'tempo'
%          'rain'

if get(H.plot_heat,'Value')==1
	if get(H.transparency, 'Value') == 1
		transp = 1;
	elseif get(H.transparency, 'Value') == 2
		transp = 0.75;
	elseif get(H.transparency, 'Value') == 3
		transp = 0.5;
	elseif get(H.transparency, 'Value') == 4
		transp = 0.25;
	elseif get(H.transparency, 'Value') == 5
		transp = 0;
	end
	
	if get(H.colormap, 'Value') == 1
		cmap = cmocean('balance',100);	
	elseif get(H.colormap, 'Value') == 2
		cmap = colormap(viridis);	
	elseif get(H.colormap, 'Value') == 3
		cmap = colormap(jet);
	elseif get(H.colormap, 'Value') == 4
		cmap = colormap(inferno);
	elseif get(H.colormap, 'Value') == 5
		cmap = colormap(magma);
	elseif get(H.colormap, 'Value') == 6
		cmap = colormap(plasma);
	elseif get(H.colormap, 'Value') == 7
		cmap = colormap(fake_parula);	
	elseif get(H.colormap, 'Value') == 8
		cmap = cmocean('delta',100);
	elseif get(H.colormap, 'Value') == 9
		cmap = cmocean('curl',100);
	elseif get(H.colormap, 'Value') == 10
		cmap = cmocean('diff',100);
	elseif get(H.colormap, 'Value') == 11
		cmap = cmocean('tarn',100);
	elseif get(H.colormap, 'Value') == 12
		cmap = cmocean('phase',100);
	elseif get(H.colormap, 'Value') == 13
		cmap = cmocean('topo',100);
	elseif get(H.colormap, 'Value') == 14
		cmap = cmocean('thermal',100);
	elseif get(H.colormap, 'Value') == 15
		cmap = cmocean('haline',100);
	elseif get(H.colormap, 'Value') == 16
		cmap = cmocean('solar',100);
	elseif get(H.colormap, 'Value') == 17
		cmap = cmocean('ice',100);
	elseif get(H.colormap, 'Value') == 18
		cmap = cmocean('gray',100);
	elseif get(H.colormap, 'Value') == 19
		cmap = cmocean('oxy',100);
	elseif get(H.colormap, 'Value') == 20
		cmap = cmocean('deep',100);
	elseif get(H.colormap, 'Value') == 21
		cmap = cmocean('dense',100);
	elseif get(H.colormap, 'Value') == 22
		cmap = cmocean('algae',100);
	elseif get(H.colormap, 'Value') == 23
		cmap = cmocean('matter',100);
	elseif get(H.colormap, 'Value') == 24
		cmap = cmocean('turbid',100);
	elseif get(H.colormap, 'Value') == 25
		cmap = cmocean('speed',100);
	elseif get(H.colormap, 'Value') == 26
		cmap = cmocean('amp',100);
	elseif get(H.colormap, 'Value') == 27
		cmap = cmocean('tempo',100);
	elseif get(H.colormap, 'Value') == 28
		cmap = cmocean('rain',100);
	elseif get(H.colormap, 'Value') == 29
		cmap = colormap(parula);
	elseif get(H.colormap, 'Value') == 30
		cmap = colormap(hsv);
	elseif get(H.colormap, 'Value') == 31
		cmap = colormap(hot);
	elseif get(H.colormap, 'Value') == 32
		cmap = colormap(cool);
	elseif get(H.colormap, 'Value') == 33
		cmap = colormap(spring);
	elseif get(H.colormap, 'Value') == 34
		cmap = colormap(summer);
	elseif get(H.colormap, 'Value') == 35
		cmap = colormap(winter);
	elseif get(H.colormap, 'Value') == 36
		cmap = colormap(gray);
	elseif get(H.colormap, 'Value') == 37
		cmap = colormap(bone);
	elseif get(H.colormap, 'Value') == 38
		cmap = colormap(copper);
	elseif get(H.colormap, 'Value') == 39
		cmap = colormap(pink);
	elseif get(H.colormap, 'Value') == 40
		cmap = colormap(lines);
	elseif get(H.colormap, 'Value') == 41
		cmap = colormap(colorcube);
	elseif get(H.colormap, 'Value') == 42
		cmap = colormap(prism);	
	elseif get(H.colormap, 'Value') == 43
		cmap = colormap(flag);	
	end
		
%{		
1	Balance
2	Viridis
3	Jet
4	Inferno
5	Magma
6	Plasma
7	Fake Parula
8	Delta
9	Curl
10	Diff
11	Tarn
12	Phase
13	Topo
14	Thermal 
15	Haline
16	Solar 
17	Ice 
18	Gray
19	Oxy
20	Deep
21	Dense 
22	Algae
23	Matter
24	Turbid
25	Speed
26	Amp
27	Tempo
28	Rain
29	Parula
30	Hsv
31	Hot
32	Cool
33	Spring
34	Summer
35	Winter
36	Gray
37	Bone
38	Copper
39	Pink
40	Lines
41	Colorcube
42	Prism
43	Flag
	
%}
	
	if get(H.clipmap, 'Value') == 1 && get(H.clipmap, 'Value') ~= 7
		cmap(1:100-str2num(get(H.clip, 'String')),:) = 1;
	end
	if get(H.clipmap, 'Value') == 1 && get(H.colormap, 'Value') == 7
		cmap = colormap(fake_parula);
		cmap(1:round((100-str2num(get(H.clip, 'String')))/100*64),:) = 1;
	end
		round((100-str2num(get(H.clip, 'String')))/100*64)
	colormap(cmap)

	s = surf(X,Y,density,'FaceAlpha',transp,'EdgeColor','none');

	rad_on=get(H.ui_view,'selectedobject');
	switch rad_on
		case H.d2
			view(2)
		case H.d3
			view(3)
	end
	
	shading interp;
end

size = str2num(get(H.size,'String'));

if get(H.marker, 'Value') == 1
	mark = 'o';
elseif get(H.marker, 'Value') == 2
	mark = '+';
elseif get(H.marker, 'Value') == 3
	mark = '*';
elseif get(H.marker, 'Value') == 4
	mark = '.';
elseif get(H.marker, 'Value') == 5
	mark = 'x';
elseif get(H.marker, 'Value') == 6
	mark = 's';	
elseif get(H.marker, 'Value') == 7
	mark = 'd';
elseif get(H.marker, 'Value') == 8
	mark = '^';
elseif get(H.marker, 'Value') == 9
	mark = 'v';	
elseif get(H.marker, 'Value') == 10
	mark = '>';	
elseif get(H.marker, 'Value') == 11
	mark = '<';	
elseif get(H.marker, 'Value') == 12
	mark = 'p';	
elseif get(H.marker, 'Value') == 13
	mark = 'h';	
elseif get(H.marker, 'Value') == 14
	mark = 'none';	
end

if get(H.s_color, 'Value') == 1
	face = 'r';
elseif get(H.s_color, 'Value') == 2
	face = 'g';
elseif get(H.s_color, 'Value') == 3
	face = 'b';
elseif get(H.s_color, 'Value') == 4
	face = 'y';
elseif get(H.s_color, 'Value') == 5
	face = 'm';
elseif get(H.s_color, 'Value') == 6
	face = 'c';	
elseif get(H.s_color, 'Value') == 7
	face = 'w';
elseif get(H.s_color, 'Value') == 8
	face = 'k';
elseif get(H.s_color, 'Value') == 9
	face = 'none';	
end

if get(H.s_edge, 'Value') == 1
	edge = 'r';
elseif get(H.s_edge, 'Value') == 2
	edge = 'g';
elseif get(H.s_edge, 'Value') == 3
	edge = 'b';
elseif get(H.s_edge, 'Value') == 4
	edge = 'y';
elseif get(H.s_edge, 'Value') == 5
	edge = 'm';
elseif get(H.s_edge, 'Value') == 6
	edge = 'c';	
elseif get(H.s_edge, 'Value') == 7
	edge = 'w';
elseif get(H.s_edge, 'Value') == 8
	edge = 'k';
elseif get(H.s_edge, 'Value') == 9
	edge = 'none';	
end

if get(H.plot_scat,'Value')==1 	
	scatter3(data(:,1), data(:,2), ones(length(data(:,1)),1).*max(max(density)) + (ones(length(data(:,1)),1).*max(max(density)))*.05, size, ...
		mark, 'MarkerEdgeColor', edge, 'MarkerFaceColor', face, 'LineWidth', str2num(get(H.edge_t,'String')));
end

if get(H.plot_scat3,'Value')==1 	
	for i = 1:length(data(:,1))		
		tmpx = val2ind(X(1,:),data(i,1));
		tmpy = val2ind(Y(:,1),data(i,2));
		X_index(i,1) = tmpx(1,1);
		Y_index(i,1) = tmpy(1,1);
		clear tmpx
		clear tmpy
	end		
	for i = 1:length(data(:,1))	
		Z(i,1) = density(Y_index(i,1),X_index(i,1));
	end
	scatter3(data(:,1),data(:,2),Z + Z.*0.05, size, mark, 'MarkerEdgeColor', edge, 'MarkerFaceColor', face);
end

if get(H.plot_runmean,'Value')==1 	
	X1 = (data(:,1));
	Y1 = (data(:,2));
	[X_sorted, X_order] = sort(X1);
	Y_sorted = Y1(X_order,:);
	M = movmean(Y_sorted,str2double(get(H.runmean_n,'String')));
	if get(H.runmean_c, 'Value') == 1
		runmean_co = 'r';
	elseif get(H.runmean_c, 'Value') == 2
		runmean_co = 'g';
	elseif get(H.runmean_c, 'Value') == 3
		runmean_co = 'b';
	elseif get(H.runmean_c, 'Value') == 4
		runmean_co = 'y';
	elseif get(H.runmean_c, 'Value') == 5
		runmean_co = 'm';
	elseif get(H.runmean_c, 'Value') == 6
		runmean_co = 'c';	
	elseif get(H.runmean_c, 'Value') == 7
		runmean_co = 'w';
	elseif get(H.runmean_c, 'Value') == 8
		runmean_co = 'k';
	elseif get(H.runmean_c, 'Value') == 9
		runmean_co = 'none';	
	end
	p1 = plot3(X_sorted,M,ones(length(data(:,1)),1).*max(max(density)), 'LineWidth', str2num(get(H.runmean_w,'String')), 'Color', runmean_co);
end

if get(H.plot_runmedian,'Value')==1 	
	X1 = (data(:,1));
	Y1 = (data(:,2));
	[X_sorted, X_order] = sort(X1);
	Y_sorted = Y1(X_order,:);
	M2 = movmedian(Y_sorted,str2double(get(H.runmedian_n,'String')));
	if get(H.runmedian_c, 'Value') == 1
		runmedian_co = 'r';
	elseif get(H.runmedian_c, 'Value') == 2
		runmedian_co = 'g';
	elseif get(H.runmedian_c, 'Value') == 3
		runmedian_co = 'b';
	elseif get(H.runmedian_c, 'Value') == 4
		runmedian_co = 'y';
	elseif get(H.runmedian_c, 'Value') == 5
		runmedian_co = 'm';
	elseif get(H.runmedian_c, 'Value') == 6
		runmedian_co = 'c';	
	elseif get(H.runmedian_c, 'Value') == 7
		runmedian_co = 'w';
	elseif get(H.runmedian_c, 'Value') == 8
		runmedian_co = 'k';
	elseif get(H.runmedian_c, 'Value') == 9
		runmedian_co = 'none';	
	end
	p2 = plot3(X_sorted,M2,ones(length(data(:,1)),1).*max(max(density)), 'LineWidth', str2num(get(H.runmedian_w,'String')), 'Color', runmedian_co);
end

if get(H.plot_poly,'Value')==1 	
	X1 = (data(:,1));
	Y1 = (data(:,2));
	[X_sorted, X_order] = sort(X1);
	Y_sorted = Y1(X_order,:);
	p = polyfit(X_sorted, Y_sorted, str2double(get(H.poly_n,'String')));
	pp = polyval(p, X_sorted);
	if get(H.poly_c, 'Value') == 1
		poly_co = 'r';
	elseif get(H.poly_c, 'Value') == 2
		poly_co = 'g';
	elseif get(H.poly_c, 'Value') == 3
		poly_co = 'b';
	elseif get(H.poly_c, 'Value') == 4
		poly_co = 'y';
	elseif get(H.poly_c, 'Value') == 5
		poly_co = 'm';
	elseif get(H.poly_c, 'Value') == 6
		poly_co = 'c';	
	elseif get(H.poly_c, 'Value') == 7
		poly_co = 'w';
	elseif get(H.poly_c, 'Value') == 8
		poly_co = 'k';
	elseif get(H.poly_c, 'Value') == 9
		poly_co = 'none';	
	end
	p3 = plot3(X_sorted, pp, ones(length(data(:,1)),1).*max(max(density)), 'LineWidth', str2num(get(H.poly_w,'String')), 'Color', poly_co);
end

if get(H.plot_runmeanh,'Value')==1 
	[max_dens, max_dens_ind] = max(density,[],1);
	for i = 1:length(Y(:,1))
		Y2(1,i) = Y(max_dens_ind(1,i),1);
	end
	X2 = [X(1,:)]';
	Y2_movmean = movmean(Y2,str2double(get(H.runmeanh_n,'String')));
	for i = 1:length(Y2)
		tmpy = val2ind(Y(:,1),Y2_movmean(1,i));
		Y2_movmean_idx(1,i) = tmpy(1,1);
		clear tmpy
	end	
	for i = 1:length(Y2_movmean_idx)	
		M3z(i,1) = density(Y2_movmean_idx(1,i),i);
	end
	if get(H.runmeanh_c, 'Value') == 1
		runmeanh_co = 'r';
	elseif get(H.runmeanh_c, 'Value') == 2
		runmeanh_co = 'g';
	elseif get(H.runmeanh_c, 'Value') == 3
		runmeanh_co = 'b';
	elseif get(H.runmeanh_c, 'Value') == 4
		runmeanh_co = 'y';
	elseif get(H.runmeanh_c, 'Value') == 5
		runmeanh_co = 'm';
	elseif get(H.runmeanh_c, 'Value') == 6
		runmeanh_co = 'c';	
	elseif get(H.runmeanh_c, 'Value') == 7
		runmeanh_co = 'w';
	elseif get(H.runmeanh_c, 'Value') == 8
		runmeanh_co = 'k';
	elseif get(H.runmeanh_c, 'Value') == 9
		runmeanh_co = 'none';	
	end
	p4 = plot3(X2,Y2_movmean,M3z + max(M3z)*0.1, 'LineWidth', str2num(get(H.runmeanh_w,'String')), 'Color', runmeanh_co);
end

if get(H.plot_runmedianh,'Value')==1 
	[max_dens, max_dens_ind] = max(density,[],1);
	for i = 1:length(Y(:,1))
		Y2(1,i) = Y(max_dens_ind(1,i),1);
	end
	Y2_movmedian = movmedian(Y2,str2double(get(H.runmedianh_n,'String')));
	for i = 1:length(Y2)
		tmpy = val2ind(Y(:,1),Y2_movmedian(1,i));
		Y2_movmedian_idx(1,i) = tmpy(1,1);
		clear tmpy
	end	
	for i = 1:length(Y2_movmedian_idx)	
		M3z(i,1) = density(Y2_movmedian_idx(1,i),i);
	end
	if get(H.runmedianh_c, 'Value') == 1
		runmedianh_co = 'r';
	elseif get(H.runmedianh_c, 'Value') == 2
		runmedianh_co = 'g';
	elseif get(H.runmedianh_c, 'Value') == 3
		runmedianh_co = 'b';
	elseif get(H.runmedianh_c, 'Value') == 4
		runmedianh_co = 'y';
	elseif get(H.runmedianh_c, 'Value') == 5
		runmedianh_co = 'm';
	elseif get(H.runmedianh_c, 'Value') == 6
		runmedianh_co = 'c';	
	elseif get(H.runmedianh_c, 'Value') == 7
		runmedianh_co = 'w';
	elseif get(H.runmedianh_c, 'Value') == 8
		runmedianh_co = 'k';
	elseif get(H.runmedianh_c, 'Value') == 9
		runmedianh_co = 'none';	
	end
	p5 = plot3(X(1,:),Y2_movmedian,M3z + max(M3z)*0.1, 'LineWidth', str2num(get(H.runmedianh_w,'String')), 'Color', runmedianh_co);
end

if get(H.contour_color, 'Value') == 1
	cont = 'r';
elseif get(H.contour_color, 'Value') == 2
	cont = 'g';
elseif get(H.contour_color, 'Value') == 3
	cont = 'b';
elseif get(H.contour_color, 'Value') == 4
	cont = 'y';
elseif get(H.contour_color, 'Value') == 5
	cont = 'm';
elseif get(H.contour_color, 'Value') == 6
	cont = 'c';	
elseif get(H.contour_color, 'Value') == 7
	cont = 'w';
elseif get(H.contour_color, 'Value') == 8
	cont = 'k';
elseif get(H.contour_color, 'Value') == 9
	cont = 'none';	
end

max_density = max(max(density));
max_density_conf = max_density - max_density*str2num(get(H.conf,'String'))*.01;

if get(H.contour,'Value')==1 
	contour3(X,Y,density,cont, 'LineWidth', str2num(get(H.contour_w,'String')));
end

if get(H.contour_num,'Value')==1 
	contour3(X,Y,density,str2double(get(H.cont_num,'String')),cont,'LineWidth', str2num(get(H.contour_w,'String')));
end

if get(H.contour_vals,'Value')==1 
	contour3(X,Y,density,[max_density_conf max_density_conf],cont, 'LineWidth', str2num(get(H.contour_w,'String')));
end

axis([str2double(get(H.xmin,'String')),str2double(get(H.xmax,'String')),str2double(get(H.ymin,'String')),str2double(get(H.ymax,'String'))]);

set(H.axes1,'FontSize',str2num(get(H.fontsize,'String')));

if get(H.bold,'Value') == 1
	set(H.axes1,'FontWeight','bold');
end
	
view(az);

set(H.azim,'String',round(az(1,1),1));
set(H.elev,'String',round(az(1,2),1));

if get(H.d2,'Value') == 1
	view(2)
end

xlabel(get(H.x_lab,'String'));
ylabel(get(H.y_lab,'String'));
if get(H.d3,'Value') == 1
	zlabel(get(H.z_lab,'String'));
end

DM_Slider = str2num(get(H.dms,'String'));

Epsilon_plot = [16.5,14.6,0,15.6,0;15.0,13.0,500,14.0,0;13.4,11.5,1000,12.5,0;11.9,9.9,1500,10.9,0;10.3,8.3,2000,9.3,0; ...
	8.7,6.7,2500,7.7,0;5.4,3.4,3500,4.4,0;3.7,1.7,4000,2.7,0;2.0,0.0,4500,1.0,0];

Decay_const_176Lu = 0.01867; %176Lu decay constant (Scherer et al., 2001) 1.867*10^-11 (same as Soderland et al., 2004)
DM_176Hf_177Hf = 0.283225; %Vervoort and Blichert-Toft, 1999
DM_176Lu_177Hf = 0.0383; %Vervoort and Blichert-Toft, 1999
BSE_176Hf_177Hf = 0.282785; %Bouvier et al. 2008
BSE_176Lu_177Hf = 0.0336; %Bouvier et al. 2008

t_176Hf_177Hf = DM_176Hf_177Hf - (DM_176Lu_177Hf*(exp(Decay_const_176Lu*DM_Slider/1000)-1));

CHURt = BSE_176Hf_177Hf - (BSE_176Lu_177Hf*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
 
DMpoint_Epsi_x = DM_Slider;
DMpoint_Epsi_y = 10000*((t_176Hf_177Hf/CHURt)-1);

Y0_Evol_DM_176Lu_177Hf = t_176Hf_177Hf + (0.0115*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
Y0_u_Evol_DM_176Lu_177Hf = t_176Hf_177Hf + (0.0193*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
Y0_l_Evol_DM_176Lu_177Hf = t_176Hf_177Hf + (0.0036*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
Ys_Evol_DM_176Lu_177Hf = t_176Hf_177Hf;

Y0_Epsi_DM_176Lu_177Hf = 10000*((Y0_Evol_DM_176Lu_177Hf/BSE_176Hf_177Hf)-1);
Y0_u_Epsi_DM_176Lu_177Hf = 10000*((Y0_u_Evol_DM_176Lu_177Hf/BSE_176Hf_177Hf)-1);
Y0_l_Epsi_DM_176Lu_177Hf = 10000*((Y0_l_Evol_DM_176Lu_177Hf/BSE_176Hf_177Hf)-1);
Ys_Epsi_DM_176Lu_177Hf = DMpoint_Epsi_y;

if get(H.evol_color, 'Value') == 1
	evo = 'r';
elseif get(H.evol_color, 'Value') == 2
	evo = 'g';
elseif get(H.evol_color, 'Value') == 3
	evo = 'b';
elseif get(H.evol_color, 'Value') == 4
	evo = 'y';
elseif get(H.evol_color, 'Value') == 5
	evo = 'm';
elseif get(H.evol_color, 'Value') == 6
	evo = 'c';	
elseif get(H.evol_color, 'Value') == 7
	evo = 'w';
elseif get(H.evol_color, 'Value') == 8
	evo = 'k';
elseif get(H.evol_color, 'Value') == 9
	evo = 'none';	
end

if get(H.chur, 'Value') == 1
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,5),ones(9,1).*max(max(density)),evo,'LineWidth',str2num(get(H.evo_t,'String')))
end

if get(H.DM, 'Value') == 1
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,4),ones(9,1).*max(max(density)),evo,'LineWidth',str2num(get(H.evo_t,'String')))
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,1),ones(9,1).*max(max(density)),strcat('--',evo),'LineWidth',str2num(get(H.evo_t,'String')))
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,2),ones(9,1).*max(max(density)),strcat('--',evo),'LineWidth',str2num(get(H.evo_t,'String')))
end

if get(H.Y, 'Value') == 1
	plot3([0 DM_Slider],[Y0_u_Epsi_DM_176Lu_177Hf, Ys_Epsi_DM_176Lu_177Hf],ones(2,1).*max(max(density)), 'Color', evo, 'LineWidth', str2num(get(H.evo_t,'String')))
end
if get(H.Yu, 'Value') == 1
	plot3([0 DM_Slider],[Y0_Epsi_DM_176Lu_177Hf, Ys_Epsi_DM_176Lu_177Hf],ones(2,1).*max(max(density)), 'Color', evo, 'LineWidth', str2num(get(H.evo_t,'String')))
end
if get(H.Yl', 'Value') == 1
	plot3([0 DM_Slider],[Y0_l_Epsi_DM_176Lu_177Hf, Ys_Epsi_DM_176Lu_177Hf],ones(2,1).*max(max(density)), 'Color', evo, 'LineWidth', str2num(get(H.evo_t,'String')))
end

hold off
%set(gca, 'XDir','reverse')
guidata(hObject,H);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% OPTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function ui_bandwidth_SelectionChangedFcn(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function opt_Myr_Callback(hObject, eventdata, H)

function opt_eHf_Callback(hObject, eventdata, H)

function setMyr_Callback(hObject, eventdata, H)
set(H.setbandwidth,'Value',1);
plot_Callback(hObject, eventdata, H)

function set_eHf_Callback(hObject, eventdata, H)
set(H.setbandwidth,'Value',1);
plot_Callback(hObject, eventdata, H)

function x_lab_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function xmin_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function xmax_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function y_lab_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function ymin_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function ymax_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function z_lab_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function fontsize_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function bold_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function plot_runmean_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function runmean_n_Callback(hObject, eventdata, H)
set(H.plot_runmean,'Value',1);
plot_Callback(hObject, eventdata, H)

function runmean_c_Callback(hObject, eventdata, H)
set(H.plot_runmean,'Value',1);
plot_Callback(hObject, eventdata, H)

function runmean_w_Callback(hObject, eventdata, H)
set(H.plot_runmean,'Value',1);
plot_Callback(hObject, eventdata, H)

function plot_runmedian_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function runmedian_n_Callback(hObject, eventdata, H)
set(H.plot_runmedian,'Value',1);
plot_Callback(hObject, eventdata, H)

function runmedian_c_Callback(hObject, eventdata, H)
set(H.plot_runmedian,'Value',1);
plot_Callback(hObject, eventdata, H)

function runmedian_w_Callback(hObject, eventdata, H)
set(H.plot_runmedian,'Value',1);
plot_Callback(hObject, eventdata, H)

function plot_poly_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function poly_n_Callback(hObject, eventdata, H)
set(H.plot_poly,'Value',1);
plot_Callback(hObject, eventdata, H)

function poly_c_Callback(hObject, eventdata, H)
set(H.plot_poly,'Value',1);
plot_Callback(hObject, eventdata, H)

function poly_w_Callback(hObject, eventdata, H)
set(H.plot_poly,'Value',1);
plot_Callback(hObject, eventdata, H)

function plot_runmeanh_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function runmeanh_n_Callback(hObject, eventdata, H)
set(H.plot_runmeanh,'Value',1);
plot_Callback(hObject, eventdata, H)

function runmeanh_c_Callback(hObject, eventdata, H)
set(H.plot_runmeanh,'Value',1);
plot_Callback(hObject, eventdata, H)

function runmeanh_w_Callback(hObject, eventdata, H)
set(H.plot_runmeanh,'Value',1);
plot_Callback(hObject, eventdata, H)

function plot_runmedianh_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function runmedianh_n_Callback(hObject, eventdata, H)
set(H.plot_runmedianh,'Value',1);
plot_Callback(hObject, eventdata, H)

function runmedianh_c_Callback(hObject, eventdata, H)
set(H.plot_runmedianh,'Value',1);
plot_Callback(hObject, eventdata, H)

function runmedianh_w_Callback(hObject, eventdata, H)
set(H.plot_runmedianh,'Value',1);
plot_Callback(hObject, eventdata, H)

function uitable1_ButtonDownFcn(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function uitable1_CellEditCallback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function plot_heat_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function ui_view_SelectionChangedFcn(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function d2_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function d3_Callback(hObject, eventdata, H)
view(3)
plot_Callback(hObject, eventdata, H)

function colormap_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function clipmap_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function clip_Callback(hObject, eventdata, H)
set(H.clipmap,'Value',1)
plot_Callback(hObject, eventdata, H)

function transparency_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function azim_Callback(hObject, eventdata, H)
az = get(H.axes1, 'View');
view(str2num(get(H.azim,'String')),az(1,2));
plot_Callback(hObject, eventdata, H)

function elev_Callback(hObject, eventdata, H)
az = get(H.axes1, 'View');
view(az(1,1),str2num(get(H.elev,'String')));
plot_Callback(hObject, eventdata, H)

function evol_color_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function DM_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function dms_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function chur_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function Y_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function evol_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function evo_t_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function Yu_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function Yl_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function plot_scat_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function plot_scat3_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function marker_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function s_color_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function s_edge_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function size_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function edge_t_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function contour_color_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

function contour_Callback(hObject, eventdata, H)
set(H.contour_num,'Value', 0)
set(H.contour_vals,'Value', 0)
plot_Callback(hObject, eventdata, H)

function contour_num_Callback(hObject, eventdata, H)
set(H.contour,'Value', 0)
set(H.contour_vals,'Value', 0)
plot_Callback(hObject, eventdata, H)

function cont_num_Callback(hObject, eventdata, H)
set(H.contour,'Value', 0)
set(H.contour_num,'Value', 1)
set(H.contour_vals,'Value', 0)
plot_Callback(hObject, eventdata, H)

function contour_vals_Callback(hObject, eventdata, H)
set(H.contour,'Value', 0)
set(H.contour_num,'Value', 0)
plot_Callback(hObject, eventdata, H)

function conf_Callback(hObject, eventdata, H)
set(H.contour,'Value', 0)
set(H.contour_num,'Value', 0)
set(H.contour_vals,'Value', 1)
plot_Callback(hObject, eventdata, H)

function contour_w_Callback(hObject, eventdata, H)
plot_Callback(hObject, eventdata, H)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% EXPORT FIGURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function export_figure_Callback(hObject, eventdata, H)

az = get(H.axes1, 'View');

data_tmp = get(H.uitable1, 'Data');

%cla(H.axes1, 'reset');

if iscell(data_tmp) == 1
	data_tmp = cell2num(data_tmp);
end

for i = 1:length(data_tmp(:,1))
	if data_tmp(i,1) >= str2double(get(H.xmin,'String')) && data_tmp(i,1) <= str2double(get(H.xmax,'String'))
		data(i,:) = data_tmp(i,:);
	end
end

data = data(any(data ~= 0,2),:);

%cla(H.axes1, 'reset');

global botev
global bandwidth_x
global bandwidth_y
global bandwidth_opt

rad_on=get(H.ui_bandwidth,'selectedobject');
switch rad_on
	case H.optimized
		botev = 1;
	case H.setbandwidth
		botev = 0;
bandwidth_x = str2double(get(H.setMyr,'String'));
bandwidth_y = str2double(get(H.set_eHf,'String'));
end

gridspc = 2^9;
MIN_XY=[str2double(get(H.xmin,'String')),str2double(get(H.ymin,'String'))];
MAX_XY=[str2double(get(H.xmax,'String')),str2double(get(H.ymax,'String'))];

[bandwidth,density,X,Y]=kde2d(data, gridspc, MIN_XY, MAX_XY);
density = density./sum(sum(density));

set(H.opt_Myr, 'String', round(bandwidth_opt(1,1),2));
set(H.opt_eHf, 'String', round(bandwidth_opt(1,2),2));

FIG = figure;
%legend(H.axes1, 'off'); 
hold on

%Colormaps

% Colormaps viridis, inferno, magma, plasma, and fake parula author info:
% Copyright (c) 2016, Ander Biguri
% All rights reserved.
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
% * Redistributions of source code must retain the above copyright notice, this
%   list of conditions and the following disclaimer.
% * Redistributions in binary form must reproduce the above copyright notice,
%   this list of conditions and the following disclaimer in the documentation
%   and/or other materials provided with the distribution
% * Neither the name of  nor the names of its
%   contributors may be used to endorse or promote products derived from this
%   software without specific prior written permission.
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
% FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
% DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
% OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

viridis = [0.267004010000000,0.00487432999999996,0.329415190000000;0.270724607511462,0.0176652160512586,0.344769972121212;0.273978467617639,0.0324335566589644,0.359714782727273;0.276740111256717,0.0486435361030842,0.374200790909091;0.279019684443310,0.0638558833388514,0.388205733939394;0.280814765409863,0.0782353984940852,0.401703264242424;0.282100725961245,0.0920580901280188,0.414649596363636;0.282915170452919,0.105548531616562,0.427042981515152;0.283209472957882,0.118759488999863,0.438823438181818;0.283033163562756,0.131803230808035,0.450002373636364;0.282364813092189,0.144697446807648,0.460542025151515;0.281222468595490,0.157473495160734,0.470433883333333;0.279632529600785,0.170150606353514,0.479678647272727;0.277575440232598,0.182717942222353,0.488249160606061;0.275123881872254,0.195196027728210,0.496181027272727;0.272243952984566,0.207559367368487,0.503447450000000;0.269013522013221,0.219818500459145,0.510092578181818;0.265438240370107,0.231957578751491,0.516121900000000;0.261551797955654,0.243968561436998,0.521561309090909;0.257417641472282,0.255851268558595,0.526452578787879;0.253040011607521,0.267570556865835,0.530805076666667;0.248464280468145,0.279175713642699,0.534681548181818;0.243734112883201,0.290606940928501,0.538097133333333;0.238884953989729,0.301899364460921,0.541105172727273;0.233953081171962,0.313038496125541,0.543737825454545;0.228976889614729,0.324018317807404,0.546031593939394;0.223983970748479,0.334865848570125,0.548030504545455;0.219006453767903,0.345547358694835,0.549753681818182;0.214067141455560,0.356107986631125,0.551248122424243;0.209193388419200,0.366525080091998,0.552532920606061;0.204401172379751,0.376822958111392,0.553639791818182;0.199703752908650,0.387006740038878,0.554589377272727;0.195113567402670,0.397077295560826,0.555398793636364;0.190631350000000,0.407061480000000,0.556089070000000;0.186266651073365,0.416942806319376,0.556665632121212;0.182009290976797,0.426755840949686,0.557144662121212;0.177858279216527,0.436494845690706,0.557528030000000;0.173802513136880,0.446175679978607,0.557820390303030;0.169831254900564,0.455807900792392,0.558022376363636;0.165935264912133,0.465392766689553,0.558129257272727;0.162096794125451,0.474949940448296,0.558138912121212;0.158306335670090,0.484473155679030,0.558036842424243;0.154551121588504,0.493981332906598,0.557818586363636;0.150825589446228,0.503473668805633,0.557467898181818;0.147131503408444,0.512956834459261,0.556973310000000;0.143471883829899,0.522437469463666,0.556320082727273;0.139862368281972,0.531913801618953,0.555483802727273;0.136327055249074,0.541395208830542,0.554455854848485;0.132916109831062,0.550875736269022,0.553208389090909;0.129679700141859,0.560362949393940,0.551736992922043;0.126691849933974,0.569851652424243,0.550000353976397;0.124058384694146,0.579341890000000,0.547991088483562;0.121878703847449,0.588831927575758,0.545681957450192;0.120322967444783,0.598318657878788,0.543063654656023;0.119504013694763,0.607798205454545,0.540108020815272;0.119627227014187,0.617265840000000,0.536802622929029;0.120817955131498,0.626716594242424,0.533125824595036;0.123237555331950,0.636144222727273,0.529064063047073;0.127018218626169,0.645541919090909,0.524597827878853;0.132201029923855,0.654903652121212,0.519720218479327;0.138902195101824,0.664219406363636,0.514402555647879;0.147042899636700,0.673483826666667,0.508651464152217;0.156648777557568,0.682685910606061,0.502437033673954;0.167624510253113,0.691818275454545,0.495761624741298;0.179901071494507,0.700871520000000,0.488616629927191;0.193409820304154,0.709834368787879,0.480975065451614;0.208030450000000,0.718700950000000,0.472873300000000;0.223729647943914,0.727454405151515,0.464232692803522;0.240385167388249,0.736091528484848,0.455123515112494;0.257953957698864,0.744596916363637,0.445490568609760;0.276364167849942,0.752962188181818,0.435351996909506;0.295560058617270,0.761177489090909,0.424720298554597;0.315502049910523,0.769227506363637,0.413536087136257;0.336132751905684,0.777109131818182,0.401902830364368;0.357432723751875,0.784800756969697,0.389668672499225;0.379187624631023,0.792301949090909,0.376892663178523;0.401819548310649,0.799596016060606,0.363818228329961;0.424885391739474,0.806673890000000,0.350103656442721;0.448511278088871,0.813529260000000,0.335893595584377;0.472586220217279,0.820144256666667,0.321189578778901;0.497189866132354,0.826522383333333,0.306013238427748;0.522176081687851,0.832642349090909,0.290368248699914;0.547608085241283,0.838509068787879,0.274283322771435;0.573399871636692,0.844112580606061,0.257788365171587;0.599513835161838,0.849450267272727,0.240926674122160;0.625947092886084,0.854528077878788,0.223759524235073;0.652570828837514,0.859336903636364,0.206372684144584;0.679428057477040,0.863897171818182,0.188888178715576;0.706375667487402,0.868206316666667,0.171497874246839;0.733413255380740,0.872287558787879,0.154463130733397;0.760450702191504,0.876156194545455,0.138186779876540;0.787409001675806,0.879833884545455,0.123280196660836;0.814259177906714,0.883352472727273,0.110486942363159;0.840870545180796,0.886734702727273,0.101041357644058;0.867241812961043,0.890020479696970,0.0958677673730973;0.895124113939394,0.895095662468121,0.0960436694934357;0.918932211818182,0.896442206000830,0.101626697171734;0.944161741818182,0.899632578395113,0.112119840357606;0.968933641515152,0.902867128076890,0.126590331216594;0.993247890000000,0.906156570000000,0.143936200000000];
inferno = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00399889256167163,0.00287953184509436,0.0280794670818182;0.00795127879887381,0.00636563464942455,0.0480946763272727;0.0133413427376349,0.0107186192562840,0.0695702669090909;0.0202832010103144,0.0157475324348777,0.0913609393696970;0.0289795978504996,0.0212350138796010,0.113567813696970;0.0397217191413972,0.0269214611172503,0.136281385727273;0.0517865237979150,0.0325367550978278,0.159531830393939;0.0643437732434502,0.0377498532623961,0.183290302909091;0.0775923173844421,0.0421673192071302,0.207524301636364;0.0916216500755484,0.0453405008822348,0.232043876727273;0.106525154463262,0.0471492247152560,0.256590945000000;0.122331601345294,0.0475439738839218,0.280778409363636;0.138952211477325,0.0465727258510071,0.304031679636364;0.156258364334311,0.0445007623305026,0.325819520909091;0.173954939579936,0.0418067727716278,0.345479181272727;0.191823551203119,0.0391204811163078,0.362738271909091;0.209622894155016,0.0371601549561695,0.377433568575758;0.227214636395263,0.0364060934405600,0.389682109818182;0.244558945419825,0.0370281786609092,0.399785207303030;0.261615682280493,0.0391236431060528,0.407958540515152;0.278437295327159,0.0424958887899517,0.414593538272727;0.295039349061702,0.0468596811613591,0.419873028000000;0.311475148430300,0.0519108275519758,0.424059248212121;0.327775155288748,0.0574270105178404,0.427304422909091;0.343975108835925,0.0632265730802830,0.429736606212121;0.360095711996609,0.0691767069549141,0.431479396181818;0.376175208151901,0.0751898579699384,0.432574307181818;0.392210841091546,0.0812091009414445,0.433117718636364;0.408237495148001,0.0871944887397472,0.433122440848485;0.424255000660395,0.0931259107413702,0.432631369818182;0.440264663545455,0.0989921803825824,0.431671557501847;0.456291102666667,0.104795933940443,0.430239227656651;0.472328255000000,0.110546584000000,0.428334320000000;0.488378092787879,0.116241601262343,0.425991582139122;0.504437674212121,0.121906642029904,0.423182870705644;0.520504280000000,0.127551450310552,0.419926708425463;0.536572723909091,0.133197548810781,0.416212802087094;0.552635898333333,0.138866077566695,0.412039314016187;0.568684763818182,0.144578822918171,0.407414276231730;0.584709655727273,0.150362237949872,0.402323007199250;0.600696829181818,0.156242241454892,0.396784358637823;0.616634938454546,0.162246280013946,0.390783833411482;0.632506746727273,0.168404831523849,0.384336677113617;0.648296214666667,0.174747877792274,0.377445191416445;0.663987527818182,0.181304165317645,0.370113176077319;0.679555909909091,0.188110937602704,0.362360175938572;0.694987324636364,0.195192406546200,0.354191497382138;0.710252113727273,0.202588963435991,0.345624853417491;0.725334360363636,0.210323296834924,0.336673126836953;0.740205661636364,0.218429642432735,0.327358989628286;0.754840583909091,0.226936239596084,0.317701515291581;0.769219910848485,0.235862706073157,0.307723391693835;0.783304905030303,0.245244335555584,0.297441438148676;0.797085648090909,0.255085905613756,0.286885476851085;0.810519941000000,0.265417765448960,0.276073292872144;0.823594678545454,0.276225169086520,0.265040926797981;0.836280707909091,0.287556432055558,0.253792009268985;0.848550357454545,0.299387738449111,0.242356636167536;0.860395631575758,0.311742348508969,0.230744085287119;0.871771440909091,0.324575256603181,0.218981812084315;0.882686740242424,0.337919951110913,0.207066184040693;0.893103441484849,0.351732717214752,0.195013810306050;0.903020608727273,0.366016598725349,0.182820715969609;0.912424088545455,0.380750244661433,0.170486123016767;0.921294013696970,0.395903261243756,0.158005952723798;0.929644083000000,0.411479007000000,0.145366973000000;0.937433156060606,0.427417913184157,0.132564472617524;0.944690633606061,0.443735751668869,0.119586014602270;0.951389878727273,0.460386443664994,0.106433454812169;0.957537507242424,0.477359614069479,0.0931232849673625;0.963133260303030,0.494637272873435,0.0797067075468474;0.968159191818182,0.512184479207010,0.0663110878697415;0.972638410878788,0.530008165941668,0.0531745184693875;0.976534780424243,0.548059957076380,0.0408510427419464;0.979876342000000,0.566352246795761,0.0308821177071040;0.982641682969697,0.584853337635102,0.0250467039957242;0.984832270333333,0.603554919452185,0.0238048668232048;0.986452054636364,0.622436923740861,0.0276118693981342;0.987475419090909,0.641499284824589,0.0373252497034655;0.987927448363636,0.660706037272013,0.0521490646874560;0.987771853181818,0.680074857919662,0.0698596082992870;0.987032646575758,0.699564242980266,0.0894210735178051;0.985694969818182,0.719173813683700,0.110455141280859;0.983755442818182,0.738892131846950,0.132774444135988;0.981237396757576,0.758672996544754,0.156300248333453;0.978131988757576,0.778541102518789,0.181133500951378;0.974496941727273,0.798402075176654,0.207291984802552;0.970344704666667,0.818284067764030,0.235014386250955;0.965794427787879,0.838073446406604,0.264412724627449;0.960969383363636,0.857711851608518,0.295747752853543;0.956110448515152,0.877103565575226,0.329299218234636;0.951596796727273,0.896011057906944,0.365195702069798;0.948089375181818,0.914303405623325,0.403680602262447;0.946392919636364,0.931557123825968,0.444334021071604;0.948585717757576,0.948502090319137,0.486431112269774;0.952486759820053,0.962034649818182,0.528595221457009;0.961213816431732,0.975178648424242,0.569545808080956;0.973433921233276,0.987179065969697,0.608337748116230;0.988362068000000,0.998364143000000,0.644924005000000];
magma = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00396963249787467,0.00295782740809874,0.0273104854393939;0.00785667780827875,0.00659792290147526,0.0461656953848485;0.0130792148733772,0.0112257533463670,0.0665074171272727;0.0196678017616254,0.0167072290056517,0.0870164943363636;0.0277090244894271,0.0228930878425070,0.107803754121212;0.0373537945495923,0.0296086745430926,0.128984709181818;0.0481884228949725,0.0366903137309453,0.150584990090909;0.0592262029289913,0.0437513428509191,0.172708162909091;0.0705722209499949,0.0501428903038421,0.195357867272727;0.0823131585145148,0.0557324419696763,0.218552009545455;0.0945649101113795,0.0604522303538439,0.242268000000000;0.107431830934813,0.0642175434689971,0.266431248181818;0.121020864821821,0.0668858746509098,0.290955213575758;0.135401060496669,0.0684102316624284,0.315577935454545;0.150619874761647,0.0686866003912929,0.339988689636364;0.166652661838188,0.0677916481367519,0.363715844393939;0.183388711792418,0.0659198419727293,0.386174706333333;0.200615203661423,0.0635238948216726,0.406738160272727;0.218095535739107,0.0612106484662445,0.424983023575758;0.235538370813556,0.0597007801980943,0.440559594636364;0.252820013054710,0.0594413931672472,0.453653383090909;0.269804305426194,0.0607408574690535,0.464387015666667;0.286502645903444,0.0635024394392208,0.473180894515151;0.302926383510630,0.0675218434699115,0.480344646545455;0.319113780189581,0.0725120341052126,0.486179326272727;0.335119903520351,0.0781672729642440,0.490971497090909;0.350985666787874,0.0842682619994275,0.494873744636364;0.366753349184250,0.0906170005373253,0.498092491848485;0.382457941431308,0.0970895571224863,0.500718510666667;0.398129294542111,0.103588151949924,0.502856182090909;0.413790436524552,0.110051807845278,0.504569460424242;0.429467150565459,0.116438271726955,0.505902878606061;0.445163096000000,0.122724371000000,0.506900806000000;0.460918625430740,0.128886954465657,0.507565488848485;0.476716010820867,0.134928050278637,0.507931392393940;0.492582630743639,0.140841429406746,0.507994081727273;0.509329079090909,0.146629607480763,0.508589300873485;0.524515405212121,0.152303606109150,0.507229873618836;0.540600729000000,0.157865121373464,0.506389106044112;0.556761543121212,0.163332659090695,0.505215850620604;0.573001300727273,0.168711800038572,0.503733280014819;0.589312913545455,0.174024612022161,0.501900266237818;0.605693982333333,0.179285374176889,0.499722099447472;0.622137057333333,0.184515265025090,0.497181812713551;0.638632839454546,0.189736741408806,0.494262267333334;0.655171937909091,0.194975290837411,0.490967534760319;0.671739381787879,0.200258508592035,0.487267801485588;0.688320409818182,0.205620901746345,0.483174961564414;0.704895679272727,0.211095652046855,0.478666168427356;0.721443969454546,0.216724165127206,0.473743098652091;0.737938515181818,0.222552794269508,0.468404760588146;0.754351323212121,0.228626973857886,0.462649703560083;0.770641950181818,0.235014275617009,0.456495758558116;0.786777335636364,0.241761787433362,0.449946841969349;0.802703594000000,0.248952518583233,0.443025054841077;0.818371546242424,0.256649484421971,0.435766306215733;0.833717167454546,0.264936247977841,0.428215469664703;0.848665468181818,0.273901792686467,0.420430368284165;0.863151987090909,0.283611269949446,0.412496955352519;0.877060488545455,0.294181815349183,0.404521639185233;0.890333693878788,0.305646093513659,0.396635975927565;0.902848141545455,0.318093093463582,0.389011620477855;0.914536298545455,0.331534161396806,0.381834800851296;0.925323023969697,0.345970754366781,0.375319978264204;0.935139844303030,0.361375304989207,0.369690039320443;0.944006448000000,0.377642889000000,0.365136328000000;0.951873471606061,0.394691302771497,0.361876665974739;0.958840615666667,0.412380228926801,0.359956421221783;0.964938695545455,0.430569882156238,0.359513108288860;0.970256725848485,0.449137421949103,0.360529004573765;0.974876232818182,0.467970515953116,0.362972209805602;0.978862331545455,0.486976844361431,0.366823367427078;0.982315711363636,0.506076211231413,0.371944633729994;0.985271162848485,0.525221572274520,0.378317349457379;0.987807335272727,0.544368653518903,0.385782917665487;0.989950356151515,0.563500450610526,0.394284979665672;0.991770686000000,0.582576935977516,0.403726455418414;0.993276389000000,0.601606130700794,0.414016148522486;0.994516603212121,0.620570178810127,0.425105381646187;0.995500435969697,0.639471906086101,0.436895180786394;0.996252059454545,0.658319055920175,0.449360950421359;0.996806738575758,0.677093558559539,0.462419504421512;0.997163117363636,0.695815596806649,0.476042482444242;0.997334562909091,0.714491410452500,0.490190810638697;0.997341824090909,0.733109808085957,0.504819031935832;0.997182061575758,0.751707754118951,0.519922922213019;0.996882672909091,0.770250806213677,0.535451177833651;0.996436258333333,0.788784593695108,0.551410576685972;0.995871274424242,0.807280515735869,0.567764062926975;0.995184503454545,0.825758484186287,0.584508787891694;0.994404788484849,0.844225426240777,0.601627866275212;0.993554996575758,0.862645005470651,0.619092775521772;0.992617645545455,0.881101684326737,0.636922755508793;0.991644614909091,0.899505148501783,0.655063315008503;0.990678935515152,0.917915809762457,0.673495346953656;0.989710901818182,0.936308315019579,0.692195255568149;0.988771666121212,0.954683151382698,0.711124451497506;0.987887716454545,0.973094593288114,0.730242033067517;0.987052509000000,0.991437853000000,0.749504188000000];
plasma = [0.0503832136000000,0.0298028976000000,0.527974883000000;0.0815823807877956,0.0265867041616092,0.540684671000000;0.107355169340663,0.0241960396818818,0.551989044484848;0.130055959529551,0.0224284389385021,0.562206488000000;0.150963769899172,0.0210020183647598,0.571623448878788;0.170659552102410,0.0197629613348841,0.580402518363636;0.189458576380101,0.0185996376756421,0.588637794181818;0.207643102940095,0.0174279699606346,0.596421397545455;0.225301872688235,0.0162007630133308,0.603770644212121;0.242598378265279,0.0148813508620481,0.610733389727273;0.259588036546517,0.0134472741785156,0.617307058212121;0.276337220269479,0.0119025077210060,0.623494091333333;0.292893648330705,0.0102714993782007,0.629290897727273;0.309274715702800,0.00858101792647744,0.634666541757576;0.325529158909198,0.00687539827389696,0.639621313000000;0.341650564862912,0.00521919672377208,0.644106100818182;0.357670324457706,0.00368037854366705,0.648114138151515;0.373587164644139,0.00234681952524928,0.651605264818182;0.389405956422400,0.00131800879488230,0.654548395181818;0.405133198647192,0.000689094521384467,0.656926097757576;0.420755875278142,0.000606100905319985,0.658681816363636;0.436278993165460,0.00116457098773206,0.659821798090909;0.451690623877970,0.00252963535096137,0.660286766333333;0.466983921357964,0.00481978013088795,0.660080674393939;0.482146201834980,0.00819085131002113,0.659177593000000;0.497168732943481,0.0128039450697855,0.657558703424243;0.512032716574328,0.0187575817324091,0.655239315090909;0.526738848006019,0.0262870398582799,0.652183564090909;0.541253177578868,0.0354365503833947,0.648442118424242;0.555581760485189,0.0460623636178491,0.643999015151515;0.569697622830225,0.0569398273251149,0.638896913000000;0.583589396308280,0.0679321395407872,0.633162289818182;0.597263474449149,0.0790301880894014,0.626824595757576;0.610667469000000,0.0902039303000000,0.619950811000000;0.623836675181818,0.101447557584133,0.612560080838201;0.636757831030303,0.112755522437882,0.604730476067744;0.649416458363636,0.124101192641246,0.596504589747760;0.661815243878788,0.135478908455582,0.587944691745968;0.673955190303030,0.146879660768836,0.579108238920008;0.685831136727273,0.158286789168903,0.570042708688667;0.697458333757576,0.169706894882675,0.560808730453804;0.708826776060606,0.181117753758607,0.551441117489391;0.719956296272727,0.192531302993559,0.541992432847761;0.730846036333333,0.203936499160041,0.532493983337734;0.741505738666667,0.215334650515528,0.522982180953011;0.751946522090909,0.226729739332939,0.513482869792766;0.762168657242424,0.238114989727708,0.504011282879754;0.772190498181818,0.249504237740860,0.494591589945520;0.782008446181818,0.260888390328339,0.485230372282859;0.791638609000000,0.272281431303064,0.475941595252205;0.801082810515152,0.283683906874827,0.466724084059951;0.810346632454545,0.295101291752511,0.457579992809514;0.819438717242424,0.306542173393512,0.448517266689175;0.828354612848485,0.318007145711176,0.439516850465082;0.837106149636364,0.329510637411159,0.430589153422853;0.845686518333333,0.341052140294506,0.421717568715355;0.854101781787879,0.352644734685166,0.412901697651499;0.862348915545455,0.364293805375540,0.404131887770853;0.870424443666667,0.376006253633586,0.395397204434765;0.878330569363636,0.387592346112036,0.386501689843391;0.886053636545455,0.399640114467872,0.378028082854842;0.893598925060606,0.411605256867961,0.369362060525727;0.900951841666667,0.423648956320469,0.360708674866815;0.908110384000000,0.435804736705972,0.352056236356083;0.915065908454545,0.448074507504643,0.343400955948958;0.921805652030303,0.460453173834215,0.334741039051357;0.928329275000000,0.472975465000000,0.326066550000000;0.934612544121212,0.485606184423229,0.317385904391242;0.940659125666667,0.498392429028170,0.308685672625678;0.946448815909091,0.511314420914924,0.299973503727936;0.951975104242424,0.524387760112599,0.291248773002625;0.957226451212121,0.537620043783125,0.282508460022751;0.962184404090909,0.551001532800762,0.273763441238937;0.966850808454545,0.564555761913269,0.265015037698232;0.971192722696970,0.578262908971352,0.256269885881504;0.975216415454546,0.592146646516460,0.247536698277106;0.978899223575758,0.606196083659726,0.238832215174876;0.982230840666667,0.620416963499396,0.230171497594631;0.985200593090909,0.634816659486345,0.221567957914143;0.987781899242424,0.649384314469667,0.213056392841293;0.989980536060606,0.664134812298712,0.204664041574770;0.991759461636364,0.679054050392784,0.196443526629633;0.993121761575758,0.694154252342995,0.188439001779935;0.994041833030303,0.709429736461378,0.180722256300012;0.994502779818182,0.724880985557720,0.173377462450791;0.994498941575758,0.740509760647437,0.166492641839155;0.993991486363636,0.756309810346189,0.160212905824302;0.992985247636364,0.772286712379486,0.154629980669400;0.991438210000000,0.788435499056204,0.149931542862865;0.989359350090909,0.804749959302527,0.146244864397980;0.986711400727273,0.821233241660880,0.143703110258317;0.983488164848485,0.837877046489316,0.142439453351283;0.979690508272727,0.854668834730875,0.142448146001543;0.975271192090909,0.871625557374025,0.143738785611683;0.970279664727273,0.888707868358415,0.146051808241278;0.964702926090909,0.905927564523120,0.149010339993564;0.958602670181818,0.923253649231005,0.151796687168694;0.952114072393939,0.940649752191961,0.152924869273177;0.945590474366293,0.958043580545455,0.148864760271971;0.940015097000001,0.975158357000000,0.131325517000000];
fake_parula = [0.208100000000000,0.166300000000000,0.529200000000000;0.211623809500000,0.189780952400000,0.577676190500000;0.212252381000000,0.213771428600000,0.626971428600000;0.208100000000000,0.238600000000000,0.677085714300000;0.195904761900000,0.264457142900000,0.727900000000000;0.170728571400000,0.291938095200000,0.779247619000000;0.125271428600000,0.324242857100000,0.830271428600000;0.0591333333000000,0.359833333300000,0.868333333300000;0.0116952381000000,0.387509523800000,0.881957142900000;0.00595714290000000,0.408614285700000,0.882842857100000;0.0165142857000000,0.426600000000000,0.878633333300000;0.0328523810000000,0.443042857100000,0.871957142900000;0.0498142857000000,0.458571428600000,0.864057142900000;0.0629333333000000,0.473690476200000,0.855438095200000;0.0722666667000000,0.488666666700000,0.846700000000000;0.0779428571000000,0.503985714300000,0.838371428600000;0.0793476190000000,0.520023809500000,0.831180952400000;0.0749428571000000,0.537542857100000,0.826271428600000;0.0640571429000000,0.556985714300000,0.823957142900000;0.0487714286000000,0.577223809500000,0.822828571400000;0.0343428571000000,0.596580952400000,0.819852381000000;0.0265000000000000,0.613700000000000,0.813500000000000;0.0238904762000000,0.628661904800000,0.803761904800000;0.0230904762000000,0.641785714300000,0.791266666700000;0.0227714286000000,0.653485714300000,0.776757142900000;0.0266619048000000,0.664195238100000,0.760719047600000;0.0383714286000000,0.674271428600000,0.743552381000000;0.0589714286000000,0.683757142900000,0.725385714300000;0.0843000000000000,0.692833333300000,0.706166666700000;0.113295238100000,0.701500000000000,0.685857142900000;0.145271428600000,0.709757142900000,0.664628571400000;0.180133333300000,0.717657142900000,0.642433333300000;0.217828571400000,0.725042857100000,0.619261904800000;0.258642857100000,0.731714285700000,0.595428571400000;0.302171428600000,0.737604761900000,0.571185714300000;0.348166666700000,0.742433333300000,0.547266666700000;0.395257142900000,0.745900000000000,0.524442857100000;0.442009523800000,0.748080952400000,0.503314285700000;0.487123809500000,0.749061904800000,0.483976190500000;0.530028571400000,0.749114285700000,0.466114285700000;0.570857142900000,0.748519047600000,0.449390476200000;0.609852381000000,0.747314285700000,0.433685714300000;0.647300000000000,0.745600000000000,0.418800000000000;0.683419047600000,0.743476190500000,0.404433333300000;0.718409523800000,0.741133333300000,0.390476190500000;0.752485714300000,0.738400000000000,0.376814285700000;0.785842857100000,0.735566666700000,0.363271428600000;0.818504761900000,0.732733333300000,0.349790476200000;0.850657142900000,0.729900000000000,0.336028571400000;0.882433333300000,0.727433333300000,0.321700000000000;0.913933333300000,0.725785714300000,0.306276190500000;0.944957142900000,0.726114285700000,0.288642857100000;0.973895238100000,0.731395238100000,0.266647619000000;0.993771428600000,0.745457142900000,0.240347619000000;0.999042857100000,0.765314285700000,0.216414285700000;0.995533333300000,0.786057142900000,0.196652381000000;0.988000000000000,0.806600000000000,0.179366666700000;0.978857142900000,0.827142857100000,0.163314285700000;0.969700000000000,0.848138095200000,0.147452381000000;0.962585714300000,0.870514285700000,0.130900000000000;0.958871428600000,0.894900000000000,0.113242857100000;0.959823809500000,0.921833333300000,0.0948380952000000;0.966100000000000,0.951442857100000,0.0755333333000000;0.976300000000000,0.983100000000000,0.0538000000000000];

% cmocean colormaps author info: 
% This function was written by Chad A. Greene of the Institute for Geophysics at the 
% University of Texas at Austin (UTIG), June 2016, using colormaps created by Kristen
% Thyng of Texas A&M University, Department of Oceanography. More information on the
% cmocean project can be found at http://matplotlib.org/cmocean/. 
% Citing this colormap: 
% If you find an occasion to cite these colormaps for any reason, or if you just want
% some nice beach reading, check out the following paper from the journal Oceanography: 
% Thyng, K.M., C.A. Greene, R.D. Hetland, H.M. Zimmerle, and S.F. DiMarco. 2016. True 
% colors of oceanography: Guidelines for effective and accurate colormap selection. 
% Oceanography 29(3):9?13, http://dx.doi.org/10.5670/oceanog.2016.66.
% MIT License
% Copyright (c) 2021 Chad Greene
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%colormaps
% cmap = cmocean('ColormapName') returns a 256x3 colormap. ColormapName can be any of
% of the following:
%
%          SEQUENTIAL:                DIVERGING:
%          'thermal'                  'balance'
%          'haline'                   'delta'
%          'solar'                    'curl'
%          'ice'                      'diff'
%          'gray'                     'tarn'
%          'oxy'
%          'deep'                     CONSTANT LIGHTNESS:
%          'dense'                    'phase'
%          'algae'
%          'matter'                   OTHER:
%          'turbid'                   'topo'
%          'speed'
%          'amp'
%          'tempo'
%          'rain'

if get(H.plot_heat,'Value')==1
	if get(H.transparency, 'Value') == 1
		transp = 1;
	elseif get(H.transparency, 'Value') == 2
		transp = 0.75;
	elseif get(H.transparency, 'Value') == 3
		transp = 0.5;
	elseif get(H.transparency, 'Value') == 4
		transp = 0.25;
	elseif get(H.transparency, 'Value') == 5
		transp = 0;
	end
	
	if get(H.colormap, 'Value') == 1
		cmap = cmocean('balance',100);	
	elseif get(H.colormap, 'Value') == 2
		cmap = colormap(viridis);	
	elseif get(H.colormap, 'Value') == 3
		cmap = colormap(jet);
	elseif get(H.colormap, 'Value') == 4
		cmap = colormap(inferno);
	elseif get(H.colormap, 'Value') == 5
		cmap = colormap(magma);
	elseif get(H.colormap, 'Value') == 6
		cmap = colormap(plasma);
	elseif get(H.colormap, 'Value') == 7
		cmap = colormap(fake_parula);	
	elseif get(H.colormap, 'Value') == 8
		cmap = cmocean('delta',100);
	elseif get(H.colormap, 'Value') == 9
		cmap = cmocean('curl',100);
	elseif get(H.colormap, 'Value') == 10
		cmap = cmocean('diff',100);
	elseif get(H.colormap, 'Value') == 11
		cmap = cmocean('tarn',100);
	elseif get(H.colormap, 'Value') == 12
		cmap = cmocean('phase',100);
	elseif get(H.colormap, 'Value') == 13
		cmap = cmocean('topo',100);
	elseif get(H.colormap, 'Value') == 14
		cmap = cmocean('thermal',100);
	elseif get(H.colormap, 'Value') == 15
		cmap = cmocean('haline',100);
	elseif get(H.colormap, 'Value') == 16
		cmap = cmocean('solar',100);
	elseif get(H.colormap, 'Value') == 17
		cmap = cmocean('ice',100);
	elseif get(H.colormap, 'Value') == 18
		cmap = cmocean('gray',100);
	elseif get(H.colormap, 'Value') == 19
		cmap = cmocean('oxy',100);
	elseif get(H.colormap, 'Value') == 20
		cmap = cmocean('deep',100);
	elseif get(H.colormap, 'Value') == 21
		cmap = cmocean('dense',100);
	elseif get(H.colormap, 'Value') == 22
		cmap = cmocean('algae',100);
	elseif get(H.colormap, 'Value') == 23
		cmap = cmocean('matter',100);
	elseif get(H.colormap, 'Value') == 24
		cmap = cmocean('turbid',100);
	elseif get(H.colormap, 'Value') == 25
		cmap = cmocean('speed',100);
	elseif get(H.colormap, 'Value') == 26
		cmap = cmocean('amp',100);
	elseif get(H.colormap, 'Value') == 27
		cmap = cmocean('tempo',100);
	elseif get(H.colormap, 'Value') == 28
		cmap = cmocean('rain',100);
	elseif get(H.colormap, 'Value') == 29
		cmap = colormap(parula);
	elseif get(H.colormap, 'Value') == 30
		cmap = colormap(hsv);
	elseif get(H.colormap, 'Value') == 31
		cmap = colormap(hot);
	elseif get(H.colormap, 'Value') == 32
		cmap = colormap(cool);
	elseif get(H.colormap, 'Value') == 33
		cmap = colormap(spring);
	elseif get(H.colormap, 'Value') == 34
		cmap = colormap(summer);
	elseif get(H.colormap, 'Value') == 35
		cmap = colormap(winter);
	elseif get(H.colormap, 'Value') == 36
		cmap = colormap(gray);
	elseif get(H.colormap, 'Value') == 37
		cmap = colormap(bone);
	elseif get(H.colormap, 'Value') == 38
		cmap = colormap(copper);
	elseif get(H.colormap, 'Value') == 39
		cmap = colormap(pink);
	elseif get(H.colormap, 'Value') == 40
		cmap = colormap(lines);
	elseif get(H.colormap, 'Value') == 41
		cmap = colormap(colorcube);
	elseif get(H.colormap, 'Value') == 42
		cmap = colormap(prism);	
	elseif get(H.colormap, 'Value') == 43
		cmap = colormap(flag);	
	end
		
%{		
1	Balance
2	Viridis
3	Jet
4	Inferno
5	Magma
6	Plasma
7	Fake Parula
8	Delta
9	Curl
10	Diff
11	Tarn
12	Phase
13	Topo
14	Thermal 
15	Haline
16	Solar 
17	Ice 
18	Gray
19	Oxy
20	Deep
21	Dense 
22	Algae
23	Matter
24	Turbid
25	Speed
26	Amp
27	Tempo
28	Rain
29	Parula
30	Hsv
31	Hot
32	Cool
33	Spring
34	Summer
35	Winter
36	Gray
37	Bone
38	Copper
39	Pink
40	Lines
41	Colorcube
42	Prism
43	Flag
	
%}
	
	if get(H.clipmap, 'Value') == 1 && get(H.clipmap, 'Value') ~= 7
		cmap(1:100-str2num(get(H.clip, 'String')),:) = 1;
	end
	if get(H.clipmap, 'Value') == 1 && get(H.colormap, 'Value') == 7
		cmap = colormap(fake_parula);
		cmap(1:round((100-str2num(get(H.clip, 'String')))/100*64),:) = 1;
	end
		round((100-str2num(get(H.clip, 'String')))/100*64)
	colormap(cmap)

	s = surf(X,Y,density,'FaceAlpha',transp,'EdgeColor','none');

	rad_on=get(H.ui_view,'selectedobject');
	switch rad_on
		case H.d2
			view(2)
		case H.d3
			view(3)
	end
	
	shading interp;
end

size = str2num(get(H.size,'String'));

if get(H.marker, 'Value') == 1
	mark = 'o';
elseif get(H.marker, 'Value') == 2
	mark = '+';
elseif get(H.marker, 'Value') == 3
	mark = '*';
elseif get(H.marker, 'Value') == 4
	mark = '.';
elseif get(H.marker, 'Value') == 5
	mark = 'x';
elseif get(H.marker, 'Value') == 6
	mark = 's';	
elseif get(H.marker, 'Value') == 7
	mark = 'd';
elseif get(H.marker, 'Value') == 8
	mark = '^';
elseif get(H.marker, 'Value') == 9
	mark = 'v';	
elseif get(H.marker, 'Value') == 10
	mark = '>';	
elseif get(H.marker, 'Value') == 11
	mark = '<';	
elseif get(H.marker, 'Value') == 12
	mark = 'p';	
elseif get(H.marker, 'Value') == 13
	mark = 'h';	
elseif get(H.marker, 'Value') == 14
	mark = 'none';	
end

if get(H.s_color, 'Value') == 1
	face = 'r';
elseif get(H.s_color, 'Value') == 2
	face = 'g';
elseif get(H.s_color, 'Value') == 3
	face = 'b';
elseif get(H.s_color, 'Value') == 4
	face = 'y';
elseif get(H.s_color, 'Value') == 5
	face = 'm';
elseif get(H.s_color, 'Value') == 6
	face = 'c';	
elseif get(H.s_color, 'Value') == 7
	face = 'w';
elseif get(H.s_color, 'Value') == 8
	face = 'k';
elseif get(H.s_color, 'Value') == 9
	face = 'none';	
end

if get(H.s_edge, 'Value') == 1
	edge = 'r';
elseif get(H.s_edge, 'Value') == 2
	edge = 'g';
elseif get(H.s_edge, 'Value') == 3
	edge = 'b';
elseif get(H.s_edge, 'Value') == 4
	edge = 'y';
elseif get(H.s_edge, 'Value') == 5
	edge = 'm';
elseif get(H.s_edge, 'Value') == 6
	edge = 'c';	
elseif get(H.s_edge, 'Value') == 7
	edge = 'w';
elseif get(H.s_edge, 'Value') == 8
	edge = 'k';
elseif get(H.s_edge, 'Value') == 9
	edge = 'none';	
end

if get(H.plot_scat,'Value')==1 	
	scatter3(data(:,1), data(:,2), ones(length(data(:,1)),1).*max(max(density)) + (ones(length(data(:,1)),1).*max(max(density)))*.05, size, ...
		mark, 'MarkerEdgeColor', edge, 'MarkerFaceColor', face, 'LineWidth', str2num(get(H.edge_t,'String')));
end

if get(H.plot_scat3,'Value')==1 	
	for i = 1:length(data(:,1))		
		tmpx = val2ind(X(1,:),data(i,1));
		tmpy = val2ind(Y(:,1),data(i,2));
		X_index(i,1) = tmpx(1,1);
		Y_index(i,1) = tmpy(1,1);
		clear tmpx
		clear tmpy
	end		
	for i = 1:length(data(:,1))	
		Z(i,1) = density(Y_index(i,1),X_index(i,1));
	end
	scatter3(data(:,1),data(:,2),Z + Z.*0.05, size, mark, 'MarkerEdgeColor', edge, 'MarkerFaceColor', face);
end

if get(H.plot_runmean,'Value')==1 	
	X1 = (data(:,1));
	Y1 = (data(:,2));
	[X_sorted, X_order] = sort(X1);
	Y_sorted = Y1(X_order,:);
	M = movmean(Y_sorted,str2double(get(H.runmean_n,'String')));
	if get(H.runmean_c, 'Value') == 1
		runmean_co = 'r';
	elseif get(H.runmean_c, 'Value') == 2
		runmean_co = 'g';
	elseif get(H.runmean_c, 'Value') == 3
		runmean_co = 'b';
	elseif get(H.runmean_c, 'Value') == 4
		runmean_co = 'y';
	elseif get(H.runmean_c, 'Value') == 5
		runmean_co = 'm';
	elseif get(H.runmean_c, 'Value') == 6
		runmean_co = 'c';	
	elseif get(H.runmean_c, 'Value') == 7
		runmean_co = 'w';
	elseif get(H.runmean_c, 'Value') == 8
		runmean_co = 'k';
	elseif get(H.runmean_c, 'Value') == 9
		runmean_co = 'none';	
	end
	p1 = plot3(X_sorted,M,ones(length(data(:,1)),1).*max(max(density)), 'LineWidth', str2num(get(H.runmean_w,'String')), 'Color', runmean_co);
end

if get(H.plot_runmedian,'Value')==1 	
	X1 = (data(:,1));
	Y1 = (data(:,2));
	[X_sorted, X_order] = sort(X1);
	Y_sorted = Y1(X_order,:);
	M2 = movmedian(Y_sorted,str2double(get(H.runmedian_n,'String')));
	if get(H.runmedian_c, 'Value') == 1
		runmedian_co = 'r';
	elseif get(H.runmedian_c, 'Value') == 2
		runmedian_co = 'g';
	elseif get(H.runmedian_c, 'Value') == 3
		runmedian_co = 'b';
	elseif get(H.runmedian_c, 'Value') == 4
		runmedian_co = 'y';
	elseif get(H.runmedian_c, 'Value') == 5
		runmedian_co = 'm';
	elseif get(H.runmedian_c, 'Value') == 6
		runmedian_co = 'c';	
	elseif get(H.runmedian_c, 'Value') == 7
		runmedian_co = 'w';
	elseif get(H.runmedian_c, 'Value') == 8
		runmedian_co = 'k';
	elseif get(H.runmedian_c, 'Value') == 9
		runmedian_co = 'none';	
	end
	p2 = plot3(X_sorted,M2,ones(length(data(:,1)),1).*max(max(density)), 'LineWidth', str2num(get(H.runmedian_w,'String')), 'Color', runmedian_co);
end

if get(H.plot_poly,'Value')==1 	
	X1 = (data(:,1));
	Y1 = (data(:,2));
	[X_sorted, X_order] = sort(X1);
	Y_sorted = Y1(X_order,:);
	p = polyfit(X_sorted, Y_sorted, str2double(get(H.poly_n,'String')));
	pp = polyval(p, X_sorted);
	if get(H.poly_c, 'Value') == 1
		poly_co = 'r';
	elseif get(H.poly_c, 'Value') == 2
		poly_co = 'g';
	elseif get(H.poly_c, 'Value') == 3
		poly_co = 'b';
	elseif get(H.poly_c, 'Value') == 4
		poly_co = 'y';
	elseif get(H.poly_c, 'Value') == 5
		poly_co = 'm';
	elseif get(H.poly_c, 'Value') == 6
		poly_co = 'c';	
	elseif get(H.poly_c, 'Value') == 7
		poly_co = 'w';
	elseif get(H.poly_c, 'Value') == 8
		poly_co = 'k';
	elseif get(H.poly_c, 'Value') == 9
		poly_co = 'none';	
	end
	p3 = plot3(X_sorted, pp, ones(length(data(:,1)),1).*max(max(density)), 'LineWidth', str2num(get(H.poly_w,'String')), 'Color', poly_co);
end

if get(H.plot_runmeanh,'Value')==1 
	[max_dens, max_dens_ind] = max(density,[],1);
	for i = 1:length(Y(:,1))
		Y2(1,i) = Y(max_dens_ind(1,i),1);
	end
	X2 = [X(1,:)]';
	Y2_movmean = movmean(Y2,str2double(get(H.runmeanh_n,'String')));
	for i = 1:length(Y2)
		tmpy = val2ind(Y(:,1),Y2_movmean(1,i));
		Y2_movmean_idx(1,i) = tmpy(1,1);
		clear tmpy
	end	
	for i = 1:length(Y2_movmean_idx)	
		M3z(i,1) = density(Y2_movmean_idx(1,i),i);
	end
	if get(H.runmeanh_c, 'Value') == 1
		runmeanh_co = 'r';
	elseif get(H.runmeanh_c, 'Value') == 2
		runmeanh_co = 'g';
	elseif get(H.runmeanh_c, 'Value') == 3
		runmeanh_co = 'b';
	elseif get(H.runmeanh_c, 'Value') == 4
		runmeanh_co = 'y';
	elseif get(H.runmeanh_c, 'Value') == 5
		runmeanh_co = 'm';
	elseif get(H.runmeanh_c, 'Value') == 6
		runmeanh_co = 'c';	
	elseif get(H.runmeanh_c, 'Value') == 7
		runmeanh_co = 'w';
	elseif get(H.runmeanh_c, 'Value') == 8
		runmeanh_co = 'k';
	elseif get(H.runmeanh_c, 'Value') == 9
		runmeanh_co = 'none';	
	end
	p4 = plot3(X2,Y2_movmean,M3z + max(M3z)*0.1, 'LineWidth', str2num(get(H.runmeanh_w,'String')), 'Color', runmeanh_co);
end

if get(H.plot_runmedianh,'Value')==1 
	[max_dens, max_dens_ind] = max(density,[],1);
	for i = 1:length(Y(:,1))
		Y2(1,i) = Y(max_dens_ind(1,i),1);
	end
	Y2_movmedian = movmedian(Y2,str2double(get(H.runmedianh_n,'String')));
	for i = 1:length(Y2)
		tmpy = val2ind(Y(:,1),Y2_movmedian(1,i));
		Y2_movmedian_idx(1,i) = tmpy(1,1);
		clear tmpy
	end	
	for i = 1:length(Y2_movmedian_idx)	
		M3z(i,1) = density(Y2_movmedian_idx(1,i),i);
	end
	if get(H.runmedianh_c, 'Value') == 1
		runmedianh_co = 'r';
	elseif get(H.runmedianh_c, 'Value') == 2
		runmedianh_co = 'g';
	elseif get(H.runmedianh_c, 'Value') == 3
		runmedianh_co = 'b';
	elseif get(H.runmedianh_c, 'Value') == 4
		runmedianh_co = 'y';
	elseif get(H.runmedianh_c, 'Value') == 5
		runmedianh_co = 'm';
	elseif get(H.runmedianh_c, 'Value') == 6
		runmedianh_co = 'c';	
	elseif get(H.runmedianh_c, 'Value') == 7
		runmedianh_co = 'w';
	elseif get(H.runmedianh_c, 'Value') == 8
		runmedianh_co = 'k';
	elseif get(H.runmedianh_c, 'Value') == 9
		runmedianh_co = 'none';	
	end
	p5 = plot3(X(1,:),Y2_movmedian,M3z + max(M3z)*0.1, 'LineWidth', str2num(get(H.runmedianh_w,'String')), 'Color', runmedianh_co);
end

if get(H.contour_color, 'Value') == 1
	cont = 'r';
elseif get(H.contour_color, 'Value') == 2
	cont = 'g';
elseif get(H.contour_color, 'Value') == 3
	cont = 'b';
elseif get(H.contour_color, 'Value') == 4
	cont = 'y';
elseif get(H.contour_color, 'Value') == 5
	cont = 'm';
elseif get(H.contour_color, 'Value') == 6
	cont = 'c';	
elseif get(H.contour_color, 'Value') == 7
	cont = 'w';
elseif get(H.contour_color, 'Value') == 8
	cont = 'k';
elseif get(H.contour_color, 'Value') == 9
	cont = 'none';	
end

max_density = max(max(density));
max_density_conf = max_density - max_density*str2num(get(H.conf,'String'))*.01;

if get(H.contour,'Value')==1 
	contour3(X,Y,density,cont, 'LineWidth', str2num(get(H.contour_w,'String')));
end

if get(H.contour_num,'Value')==1 
	contour3(X,Y,density,str2double(get(H.cont_num,'String')),cont,'LineWidth', str2num(get(H.contour_w,'String')));
end

if get(H.contour_vals,'Value')==1 
	contour3(X,Y,density,[max_density_conf max_density_conf],cont, 'LineWidth', str2num(get(H.contour_w,'String')));
end

axis([str2double(get(H.xmin,'String')),str2double(get(H.xmax,'String')),str2double(get(H.ymin,'String')),str2double(get(H.ymax,'String'))]);

%set(FIG,'FontSize',str2num(get(H.fontsize,'String')));

%if get(H.bold,'Value') == 1
%	set(FIG,'FontWeight','bold');
%end
	
view(az);

set(H.azim,'String',round(az(1,1),1));
set(H.elev,'String',round(az(1,2),1));

if get(H.d2,'Value') == 1
	view(2)
end

xlabel(get(H.x_lab,'String'));
ylabel(get(H.y_lab,'String'));
if get(H.d3,'Value') == 1
	zlabel(get(H.z_lab,'String'));
end

DM_Slider = str2num(get(H.dms,'String'));

Epsilon_plot = [16.5,14.6,0,15.6,0;15.0,13.0,500,14.0,0;13.4,11.5,1000,12.5,0;11.9,9.9,1500,10.9,0;10.3,8.3,2000,9.3,0; ...
	8.7,6.7,2500,7.7,0;5.4,3.4,3500,4.4,0;3.7,1.7,4000,2.7,0;2.0,0.0,4500,1.0,0];

Decay_const_176Lu = 0.01867; %176Lu decay constant (Scherer et al., 2001) 1.867*10^-11 (same as Soderland et al., 2004)
DM_176Hf_177Hf = 0.283225; %Vervoort and Blichert-Toft, 1999
DM_176Lu_177Hf = 0.0383; %Vervoort and Blichert-Toft, 1999
BSE_176Hf_177Hf = 0.282785; %Bouvier et al. 2008
BSE_176Lu_177Hf = 0.0336; %Bouvier et al. 2008

t_176Hf_177Hf = DM_176Hf_177Hf - (DM_176Lu_177Hf*(exp(Decay_const_176Lu*DM_Slider/1000)-1));

CHURt = BSE_176Hf_177Hf - (BSE_176Lu_177Hf*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
 
DMpoint_Epsi_x = DM_Slider;
DMpoint_Epsi_y = 10000*((t_176Hf_177Hf/CHURt)-1);

Y0_Evol_DM_176Lu_177Hf = t_176Hf_177Hf + (0.0115*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
Y0_u_Evol_DM_176Lu_177Hf = t_176Hf_177Hf + (0.0193*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
Y0_l_Evol_DM_176Lu_177Hf = t_176Hf_177Hf + (0.0036*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
Ys_Evol_DM_176Lu_177Hf = t_176Hf_177Hf;

Y0_Epsi_DM_176Lu_177Hf = 10000*((Y0_Evol_DM_176Lu_177Hf/BSE_176Hf_177Hf)-1);
Y0_u_Epsi_DM_176Lu_177Hf = 10000*((Y0_u_Evol_DM_176Lu_177Hf/BSE_176Hf_177Hf)-1);
Y0_l_Epsi_DM_176Lu_177Hf = 10000*((Y0_l_Evol_DM_176Lu_177Hf/BSE_176Hf_177Hf)-1);
Ys_Epsi_DM_176Lu_177Hf = DMpoint_Epsi_y;

if get(H.evol_color, 'Value') == 1
	evo = 'r';
elseif get(H.evol_color, 'Value') == 2
	evo = 'g';
elseif get(H.evol_color, 'Value') == 3
	evo = 'b';
elseif get(H.evol_color, 'Value') == 4
	evo = 'y';
elseif get(H.evol_color, 'Value') == 5
	evo = 'm';
elseif get(H.evol_color, 'Value') == 6
	evo = 'c';	
elseif get(H.evol_color, 'Value') == 7
	evo = 'w';
elseif get(H.evol_color, 'Value') == 8
	evo = 'k';
elseif get(H.evol_color, 'Value') == 9
	evo = 'none';	
end

if get(H.chur, 'Value') == 1
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,5),ones(9,1).*max(max(density)),evo,'LineWidth',str2num(get(H.evo_t,'String')))
end

if get(H.DM, 'Value') == 1
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,4),ones(9,1).*max(max(density)),evo,'LineWidth',str2num(get(H.evo_t,'String')))
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,1),ones(9,1).*max(max(density)),strcat('--',evo),'LineWidth',str2num(get(H.evo_t,'String')))
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,2),ones(9,1).*max(max(density)),strcat('--',evo),'LineWidth',str2num(get(H.evo_t,'String')))
end

if get(H.Y, 'Value') == 1
	plot3([0 DM_Slider],[Y0_u_Epsi_DM_176Lu_177Hf, Ys_Epsi_DM_176Lu_177Hf],ones(2,1).*max(max(density)), 'Color', evo, 'LineWidth', str2num(get(H.evo_t,'String')))
end
if get(H.Yu, 'Value') == 1
	plot3([0 DM_Slider],[Y0_Epsi_DM_176Lu_177Hf, Ys_Epsi_DM_176Lu_177Hf],ones(2,1).*max(max(density)), 'Color', evo, 'LineWidth', str2num(get(H.evo_t,'String')))
end
if get(H.Yl', 'Value') == 1
	plot3([0 DM_Slider],[Y0_l_Epsi_DM_176Lu_177Hf, Ys_Epsi_DM_176Lu_177Hf],ones(2,1).*max(max(density)), 'Color', evo, 'LineWidth', str2num(get(H.evo_t,'String')))
end

hold off









%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SAVE FIGURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function save_plot_Callback(hObject, eventdata, H)

az = get(H.axes1, 'View');

data_tmp = get(H.uitable1, 'Data');

%cla(H.axes1, 'reset');

if iscell(data_tmp) == 1
	data_tmp = cell2num(data_tmp);
end

for i = 1:length(data_tmp(:,1))
	if data_tmp(i,1) >= str2double(get(H.xmin,'String')) && data_tmp(i,1) <= str2double(get(H.xmax,'String'))
		data(i,:) = data_tmp(i,:);
	end
end

data = data(any(data ~= 0,2),:);

%cla(H.axes1, 'reset');

global botev
global bandwidth_x
global bandwidth_y
global bandwidth_opt

rad_on=get(H.ui_bandwidth,'selectedobject');
switch rad_on
	case H.optimized
		botev = 1;
	case H.setbandwidth
		botev = 0;
bandwidth_x = str2double(get(H.setMyr,'String'));
bandwidth_y = str2double(get(H.set_eHf,'String'));
end

gridspc = 2^9;
MIN_XY=[str2double(get(H.xmin,'String')),str2double(get(H.ymin,'String'))];
MAX_XY=[str2double(get(H.xmax,'String')),str2double(get(H.ymax,'String'))];

[bandwidth,density,X,Y]=kde2d(data, gridspc, MIN_XY, MAX_XY);
density = density./sum(sum(density));

set(H.opt_Myr, 'String', round(bandwidth_opt(1,1),2));
set(H.opt_eHf, 'String', round(bandwidth_opt(1,2),2));

FIG = figure('visible', 'off');
%legend(H.axes1, 'off'); 
hold on

%Colormaps

% Colormaps viridis, inferno, magma, plasma, and fake parula author info:
% Copyright (c) 2016, Ander Biguri
% All rights reserved.
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
% * Redistributions of source code must retain the above copyright notice, this
%   list of conditions and the following disclaimer.
% * Redistributions in binary form must reproduce the above copyright notice,
%   this list of conditions and the following disclaimer in the documentation
%   and/or other materials provided with the distribution
% * Neither the name of  nor the names of its
%   contributors may be used to endorse or promote products derived from this
%   software without specific prior written permission.
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
% FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
% DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
% OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

viridis = [0.267004010000000,0.00487432999999996,0.329415190000000;0.270724607511462,0.0176652160512586,0.344769972121212;0.273978467617639,0.0324335566589644,0.359714782727273;0.276740111256717,0.0486435361030842,0.374200790909091;0.279019684443310,0.0638558833388514,0.388205733939394;0.280814765409863,0.0782353984940852,0.401703264242424;0.282100725961245,0.0920580901280188,0.414649596363636;0.282915170452919,0.105548531616562,0.427042981515152;0.283209472957882,0.118759488999863,0.438823438181818;0.283033163562756,0.131803230808035,0.450002373636364;0.282364813092189,0.144697446807648,0.460542025151515;0.281222468595490,0.157473495160734,0.470433883333333;0.279632529600785,0.170150606353514,0.479678647272727;0.277575440232598,0.182717942222353,0.488249160606061;0.275123881872254,0.195196027728210,0.496181027272727;0.272243952984566,0.207559367368487,0.503447450000000;0.269013522013221,0.219818500459145,0.510092578181818;0.265438240370107,0.231957578751491,0.516121900000000;0.261551797955654,0.243968561436998,0.521561309090909;0.257417641472282,0.255851268558595,0.526452578787879;0.253040011607521,0.267570556865835,0.530805076666667;0.248464280468145,0.279175713642699,0.534681548181818;0.243734112883201,0.290606940928501,0.538097133333333;0.238884953989729,0.301899364460921,0.541105172727273;0.233953081171962,0.313038496125541,0.543737825454545;0.228976889614729,0.324018317807404,0.546031593939394;0.223983970748479,0.334865848570125,0.548030504545455;0.219006453767903,0.345547358694835,0.549753681818182;0.214067141455560,0.356107986631125,0.551248122424243;0.209193388419200,0.366525080091998,0.552532920606061;0.204401172379751,0.376822958111392,0.553639791818182;0.199703752908650,0.387006740038878,0.554589377272727;0.195113567402670,0.397077295560826,0.555398793636364;0.190631350000000,0.407061480000000,0.556089070000000;0.186266651073365,0.416942806319376,0.556665632121212;0.182009290976797,0.426755840949686,0.557144662121212;0.177858279216527,0.436494845690706,0.557528030000000;0.173802513136880,0.446175679978607,0.557820390303030;0.169831254900564,0.455807900792392,0.558022376363636;0.165935264912133,0.465392766689553,0.558129257272727;0.162096794125451,0.474949940448296,0.558138912121212;0.158306335670090,0.484473155679030,0.558036842424243;0.154551121588504,0.493981332906598,0.557818586363636;0.150825589446228,0.503473668805633,0.557467898181818;0.147131503408444,0.512956834459261,0.556973310000000;0.143471883829899,0.522437469463666,0.556320082727273;0.139862368281972,0.531913801618953,0.555483802727273;0.136327055249074,0.541395208830542,0.554455854848485;0.132916109831062,0.550875736269022,0.553208389090909;0.129679700141859,0.560362949393940,0.551736992922043;0.126691849933974,0.569851652424243,0.550000353976397;0.124058384694146,0.579341890000000,0.547991088483562;0.121878703847449,0.588831927575758,0.545681957450192;0.120322967444783,0.598318657878788,0.543063654656023;0.119504013694763,0.607798205454545,0.540108020815272;0.119627227014187,0.617265840000000,0.536802622929029;0.120817955131498,0.626716594242424,0.533125824595036;0.123237555331950,0.636144222727273,0.529064063047073;0.127018218626169,0.645541919090909,0.524597827878853;0.132201029923855,0.654903652121212,0.519720218479327;0.138902195101824,0.664219406363636,0.514402555647879;0.147042899636700,0.673483826666667,0.508651464152217;0.156648777557568,0.682685910606061,0.502437033673954;0.167624510253113,0.691818275454545,0.495761624741298;0.179901071494507,0.700871520000000,0.488616629927191;0.193409820304154,0.709834368787879,0.480975065451614;0.208030450000000,0.718700950000000,0.472873300000000;0.223729647943914,0.727454405151515,0.464232692803522;0.240385167388249,0.736091528484848,0.455123515112494;0.257953957698864,0.744596916363637,0.445490568609760;0.276364167849942,0.752962188181818,0.435351996909506;0.295560058617270,0.761177489090909,0.424720298554597;0.315502049910523,0.769227506363637,0.413536087136257;0.336132751905684,0.777109131818182,0.401902830364368;0.357432723751875,0.784800756969697,0.389668672499225;0.379187624631023,0.792301949090909,0.376892663178523;0.401819548310649,0.799596016060606,0.363818228329961;0.424885391739474,0.806673890000000,0.350103656442721;0.448511278088871,0.813529260000000,0.335893595584377;0.472586220217279,0.820144256666667,0.321189578778901;0.497189866132354,0.826522383333333,0.306013238427748;0.522176081687851,0.832642349090909,0.290368248699914;0.547608085241283,0.838509068787879,0.274283322771435;0.573399871636692,0.844112580606061,0.257788365171587;0.599513835161838,0.849450267272727,0.240926674122160;0.625947092886084,0.854528077878788,0.223759524235073;0.652570828837514,0.859336903636364,0.206372684144584;0.679428057477040,0.863897171818182,0.188888178715576;0.706375667487402,0.868206316666667,0.171497874246839;0.733413255380740,0.872287558787879,0.154463130733397;0.760450702191504,0.876156194545455,0.138186779876540;0.787409001675806,0.879833884545455,0.123280196660836;0.814259177906714,0.883352472727273,0.110486942363159;0.840870545180796,0.886734702727273,0.101041357644058;0.867241812961043,0.890020479696970,0.0958677673730973;0.895124113939394,0.895095662468121,0.0960436694934357;0.918932211818182,0.896442206000830,0.101626697171734;0.944161741818182,0.899632578395113,0.112119840357606;0.968933641515152,0.902867128076890,0.126590331216594;0.993247890000000,0.906156570000000,0.143936200000000];
inferno = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00399889256167163,0.00287953184509436,0.0280794670818182;0.00795127879887381,0.00636563464942455,0.0480946763272727;0.0133413427376349,0.0107186192562840,0.0695702669090909;0.0202832010103144,0.0157475324348777,0.0913609393696970;0.0289795978504996,0.0212350138796010,0.113567813696970;0.0397217191413972,0.0269214611172503,0.136281385727273;0.0517865237979150,0.0325367550978278,0.159531830393939;0.0643437732434502,0.0377498532623961,0.183290302909091;0.0775923173844421,0.0421673192071302,0.207524301636364;0.0916216500755484,0.0453405008822348,0.232043876727273;0.106525154463262,0.0471492247152560,0.256590945000000;0.122331601345294,0.0475439738839218,0.280778409363636;0.138952211477325,0.0465727258510071,0.304031679636364;0.156258364334311,0.0445007623305026,0.325819520909091;0.173954939579936,0.0418067727716278,0.345479181272727;0.191823551203119,0.0391204811163078,0.362738271909091;0.209622894155016,0.0371601549561695,0.377433568575758;0.227214636395263,0.0364060934405600,0.389682109818182;0.244558945419825,0.0370281786609092,0.399785207303030;0.261615682280493,0.0391236431060528,0.407958540515152;0.278437295327159,0.0424958887899517,0.414593538272727;0.295039349061702,0.0468596811613591,0.419873028000000;0.311475148430300,0.0519108275519758,0.424059248212121;0.327775155288748,0.0574270105178404,0.427304422909091;0.343975108835925,0.0632265730802830,0.429736606212121;0.360095711996609,0.0691767069549141,0.431479396181818;0.376175208151901,0.0751898579699384,0.432574307181818;0.392210841091546,0.0812091009414445,0.433117718636364;0.408237495148001,0.0871944887397472,0.433122440848485;0.424255000660395,0.0931259107413702,0.432631369818182;0.440264663545455,0.0989921803825824,0.431671557501847;0.456291102666667,0.104795933940443,0.430239227656651;0.472328255000000,0.110546584000000,0.428334320000000;0.488378092787879,0.116241601262343,0.425991582139122;0.504437674212121,0.121906642029904,0.423182870705644;0.520504280000000,0.127551450310552,0.419926708425463;0.536572723909091,0.133197548810781,0.416212802087094;0.552635898333333,0.138866077566695,0.412039314016187;0.568684763818182,0.144578822918171,0.407414276231730;0.584709655727273,0.150362237949872,0.402323007199250;0.600696829181818,0.156242241454892,0.396784358637823;0.616634938454546,0.162246280013946,0.390783833411482;0.632506746727273,0.168404831523849,0.384336677113617;0.648296214666667,0.174747877792274,0.377445191416445;0.663987527818182,0.181304165317645,0.370113176077319;0.679555909909091,0.188110937602704,0.362360175938572;0.694987324636364,0.195192406546200,0.354191497382138;0.710252113727273,0.202588963435991,0.345624853417491;0.725334360363636,0.210323296834924,0.336673126836953;0.740205661636364,0.218429642432735,0.327358989628286;0.754840583909091,0.226936239596084,0.317701515291581;0.769219910848485,0.235862706073157,0.307723391693835;0.783304905030303,0.245244335555584,0.297441438148676;0.797085648090909,0.255085905613756,0.286885476851085;0.810519941000000,0.265417765448960,0.276073292872144;0.823594678545454,0.276225169086520,0.265040926797981;0.836280707909091,0.287556432055558,0.253792009268985;0.848550357454545,0.299387738449111,0.242356636167536;0.860395631575758,0.311742348508969,0.230744085287119;0.871771440909091,0.324575256603181,0.218981812084315;0.882686740242424,0.337919951110913,0.207066184040693;0.893103441484849,0.351732717214752,0.195013810306050;0.903020608727273,0.366016598725349,0.182820715969609;0.912424088545455,0.380750244661433,0.170486123016767;0.921294013696970,0.395903261243756,0.158005952723798;0.929644083000000,0.411479007000000,0.145366973000000;0.937433156060606,0.427417913184157,0.132564472617524;0.944690633606061,0.443735751668869,0.119586014602270;0.951389878727273,0.460386443664994,0.106433454812169;0.957537507242424,0.477359614069479,0.0931232849673625;0.963133260303030,0.494637272873435,0.0797067075468474;0.968159191818182,0.512184479207010,0.0663110878697415;0.972638410878788,0.530008165941668,0.0531745184693875;0.976534780424243,0.548059957076380,0.0408510427419464;0.979876342000000,0.566352246795761,0.0308821177071040;0.982641682969697,0.584853337635102,0.0250467039957242;0.984832270333333,0.603554919452185,0.0238048668232048;0.986452054636364,0.622436923740861,0.0276118693981342;0.987475419090909,0.641499284824589,0.0373252497034655;0.987927448363636,0.660706037272013,0.0521490646874560;0.987771853181818,0.680074857919662,0.0698596082992870;0.987032646575758,0.699564242980266,0.0894210735178051;0.985694969818182,0.719173813683700,0.110455141280859;0.983755442818182,0.738892131846950,0.132774444135988;0.981237396757576,0.758672996544754,0.156300248333453;0.978131988757576,0.778541102518789,0.181133500951378;0.974496941727273,0.798402075176654,0.207291984802552;0.970344704666667,0.818284067764030,0.235014386250955;0.965794427787879,0.838073446406604,0.264412724627449;0.960969383363636,0.857711851608518,0.295747752853543;0.956110448515152,0.877103565575226,0.329299218234636;0.951596796727273,0.896011057906944,0.365195702069798;0.948089375181818,0.914303405623325,0.403680602262447;0.946392919636364,0.931557123825968,0.444334021071604;0.948585717757576,0.948502090319137,0.486431112269774;0.952486759820053,0.962034649818182,0.528595221457009;0.961213816431732,0.975178648424242,0.569545808080956;0.973433921233276,0.987179065969697,0.608337748116230;0.988362068000000,0.998364143000000,0.644924005000000];
magma = [0.00146159096000000,0.000466127766000000,0.0138655200000000;0.00396963249787467,0.00295782740809874,0.0273104854393939;0.00785667780827875,0.00659792290147526,0.0461656953848485;0.0130792148733772,0.0112257533463670,0.0665074171272727;0.0196678017616254,0.0167072290056517,0.0870164943363636;0.0277090244894271,0.0228930878425070,0.107803754121212;0.0373537945495923,0.0296086745430926,0.128984709181818;0.0481884228949725,0.0366903137309453,0.150584990090909;0.0592262029289913,0.0437513428509191,0.172708162909091;0.0705722209499949,0.0501428903038421,0.195357867272727;0.0823131585145148,0.0557324419696763,0.218552009545455;0.0945649101113795,0.0604522303538439,0.242268000000000;0.107431830934813,0.0642175434689971,0.266431248181818;0.121020864821821,0.0668858746509098,0.290955213575758;0.135401060496669,0.0684102316624284,0.315577935454545;0.150619874761647,0.0686866003912929,0.339988689636364;0.166652661838188,0.0677916481367519,0.363715844393939;0.183388711792418,0.0659198419727293,0.386174706333333;0.200615203661423,0.0635238948216726,0.406738160272727;0.218095535739107,0.0612106484662445,0.424983023575758;0.235538370813556,0.0597007801980943,0.440559594636364;0.252820013054710,0.0594413931672472,0.453653383090909;0.269804305426194,0.0607408574690535,0.464387015666667;0.286502645903444,0.0635024394392208,0.473180894515151;0.302926383510630,0.0675218434699115,0.480344646545455;0.319113780189581,0.0725120341052126,0.486179326272727;0.335119903520351,0.0781672729642440,0.490971497090909;0.350985666787874,0.0842682619994275,0.494873744636364;0.366753349184250,0.0906170005373253,0.498092491848485;0.382457941431308,0.0970895571224863,0.500718510666667;0.398129294542111,0.103588151949924,0.502856182090909;0.413790436524552,0.110051807845278,0.504569460424242;0.429467150565459,0.116438271726955,0.505902878606061;0.445163096000000,0.122724371000000,0.506900806000000;0.460918625430740,0.128886954465657,0.507565488848485;0.476716010820867,0.134928050278637,0.507931392393940;0.492582630743639,0.140841429406746,0.507994081727273;0.509329079090909,0.146629607480763,0.508589300873485;0.524515405212121,0.152303606109150,0.507229873618836;0.540600729000000,0.157865121373464,0.506389106044112;0.556761543121212,0.163332659090695,0.505215850620604;0.573001300727273,0.168711800038572,0.503733280014819;0.589312913545455,0.174024612022161,0.501900266237818;0.605693982333333,0.179285374176889,0.499722099447472;0.622137057333333,0.184515265025090,0.497181812713551;0.638632839454546,0.189736741408806,0.494262267333334;0.655171937909091,0.194975290837411,0.490967534760319;0.671739381787879,0.200258508592035,0.487267801485588;0.688320409818182,0.205620901746345,0.483174961564414;0.704895679272727,0.211095652046855,0.478666168427356;0.721443969454546,0.216724165127206,0.473743098652091;0.737938515181818,0.222552794269508,0.468404760588146;0.754351323212121,0.228626973857886,0.462649703560083;0.770641950181818,0.235014275617009,0.456495758558116;0.786777335636364,0.241761787433362,0.449946841969349;0.802703594000000,0.248952518583233,0.443025054841077;0.818371546242424,0.256649484421971,0.435766306215733;0.833717167454546,0.264936247977841,0.428215469664703;0.848665468181818,0.273901792686467,0.420430368284165;0.863151987090909,0.283611269949446,0.412496955352519;0.877060488545455,0.294181815349183,0.404521639185233;0.890333693878788,0.305646093513659,0.396635975927565;0.902848141545455,0.318093093463582,0.389011620477855;0.914536298545455,0.331534161396806,0.381834800851296;0.925323023969697,0.345970754366781,0.375319978264204;0.935139844303030,0.361375304989207,0.369690039320443;0.944006448000000,0.377642889000000,0.365136328000000;0.951873471606061,0.394691302771497,0.361876665974739;0.958840615666667,0.412380228926801,0.359956421221783;0.964938695545455,0.430569882156238,0.359513108288860;0.970256725848485,0.449137421949103,0.360529004573765;0.974876232818182,0.467970515953116,0.362972209805602;0.978862331545455,0.486976844361431,0.366823367427078;0.982315711363636,0.506076211231413,0.371944633729994;0.985271162848485,0.525221572274520,0.378317349457379;0.987807335272727,0.544368653518903,0.385782917665487;0.989950356151515,0.563500450610526,0.394284979665672;0.991770686000000,0.582576935977516,0.403726455418414;0.993276389000000,0.601606130700794,0.414016148522486;0.994516603212121,0.620570178810127,0.425105381646187;0.995500435969697,0.639471906086101,0.436895180786394;0.996252059454545,0.658319055920175,0.449360950421359;0.996806738575758,0.677093558559539,0.462419504421512;0.997163117363636,0.695815596806649,0.476042482444242;0.997334562909091,0.714491410452500,0.490190810638697;0.997341824090909,0.733109808085957,0.504819031935832;0.997182061575758,0.751707754118951,0.519922922213019;0.996882672909091,0.770250806213677,0.535451177833651;0.996436258333333,0.788784593695108,0.551410576685972;0.995871274424242,0.807280515735869,0.567764062926975;0.995184503454545,0.825758484186287,0.584508787891694;0.994404788484849,0.844225426240777,0.601627866275212;0.993554996575758,0.862645005470651,0.619092775521772;0.992617645545455,0.881101684326737,0.636922755508793;0.991644614909091,0.899505148501783,0.655063315008503;0.990678935515152,0.917915809762457,0.673495346953656;0.989710901818182,0.936308315019579,0.692195255568149;0.988771666121212,0.954683151382698,0.711124451497506;0.987887716454545,0.973094593288114,0.730242033067517;0.987052509000000,0.991437853000000,0.749504188000000];
plasma = [0.0503832136000000,0.0298028976000000,0.527974883000000;0.0815823807877956,0.0265867041616092,0.540684671000000;0.107355169340663,0.0241960396818818,0.551989044484848;0.130055959529551,0.0224284389385021,0.562206488000000;0.150963769899172,0.0210020183647598,0.571623448878788;0.170659552102410,0.0197629613348841,0.580402518363636;0.189458576380101,0.0185996376756421,0.588637794181818;0.207643102940095,0.0174279699606346,0.596421397545455;0.225301872688235,0.0162007630133308,0.603770644212121;0.242598378265279,0.0148813508620481,0.610733389727273;0.259588036546517,0.0134472741785156,0.617307058212121;0.276337220269479,0.0119025077210060,0.623494091333333;0.292893648330705,0.0102714993782007,0.629290897727273;0.309274715702800,0.00858101792647744,0.634666541757576;0.325529158909198,0.00687539827389696,0.639621313000000;0.341650564862912,0.00521919672377208,0.644106100818182;0.357670324457706,0.00368037854366705,0.648114138151515;0.373587164644139,0.00234681952524928,0.651605264818182;0.389405956422400,0.00131800879488230,0.654548395181818;0.405133198647192,0.000689094521384467,0.656926097757576;0.420755875278142,0.000606100905319985,0.658681816363636;0.436278993165460,0.00116457098773206,0.659821798090909;0.451690623877970,0.00252963535096137,0.660286766333333;0.466983921357964,0.00481978013088795,0.660080674393939;0.482146201834980,0.00819085131002113,0.659177593000000;0.497168732943481,0.0128039450697855,0.657558703424243;0.512032716574328,0.0187575817324091,0.655239315090909;0.526738848006019,0.0262870398582799,0.652183564090909;0.541253177578868,0.0354365503833947,0.648442118424242;0.555581760485189,0.0460623636178491,0.643999015151515;0.569697622830225,0.0569398273251149,0.638896913000000;0.583589396308280,0.0679321395407872,0.633162289818182;0.597263474449149,0.0790301880894014,0.626824595757576;0.610667469000000,0.0902039303000000,0.619950811000000;0.623836675181818,0.101447557584133,0.612560080838201;0.636757831030303,0.112755522437882,0.604730476067744;0.649416458363636,0.124101192641246,0.596504589747760;0.661815243878788,0.135478908455582,0.587944691745968;0.673955190303030,0.146879660768836,0.579108238920008;0.685831136727273,0.158286789168903,0.570042708688667;0.697458333757576,0.169706894882675,0.560808730453804;0.708826776060606,0.181117753758607,0.551441117489391;0.719956296272727,0.192531302993559,0.541992432847761;0.730846036333333,0.203936499160041,0.532493983337734;0.741505738666667,0.215334650515528,0.522982180953011;0.751946522090909,0.226729739332939,0.513482869792766;0.762168657242424,0.238114989727708,0.504011282879754;0.772190498181818,0.249504237740860,0.494591589945520;0.782008446181818,0.260888390328339,0.485230372282859;0.791638609000000,0.272281431303064,0.475941595252205;0.801082810515152,0.283683906874827,0.466724084059951;0.810346632454545,0.295101291752511,0.457579992809514;0.819438717242424,0.306542173393512,0.448517266689175;0.828354612848485,0.318007145711176,0.439516850465082;0.837106149636364,0.329510637411159,0.430589153422853;0.845686518333333,0.341052140294506,0.421717568715355;0.854101781787879,0.352644734685166,0.412901697651499;0.862348915545455,0.364293805375540,0.404131887770853;0.870424443666667,0.376006253633586,0.395397204434765;0.878330569363636,0.387592346112036,0.386501689843391;0.886053636545455,0.399640114467872,0.378028082854842;0.893598925060606,0.411605256867961,0.369362060525727;0.900951841666667,0.423648956320469,0.360708674866815;0.908110384000000,0.435804736705972,0.352056236356083;0.915065908454545,0.448074507504643,0.343400955948958;0.921805652030303,0.460453173834215,0.334741039051357;0.928329275000000,0.472975465000000,0.326066550000000;0.934612544121212,0.485606184423229,0.317385904391242;0.940659125666667,0.498392429028170,0.308685672625678;0.946448815909091,0.511314420914924,0.299973503727936;0.951975104242424,0.524387760112599,0.291248773002625;0.957226451212121,0.537620043783125,0.282508460022751;0.962184404090909,0.551001532800762,0.273763441238937;0.966850808454545,0.564555761913269,0.265015037698232;0.971192722696970,0.578262908971352,0.256269885881504;0.975216415454546,0.592146646516460,0.247536698277106;0.978899223575758,0.606196083659726,0.238832215174876;0.982230840666667,0.620416963499396,0.230171497594631;0.985200593090909,0.634816659486345,0.221567957914143;0.987781899242424,0.649384314469667,0.213056392841293;0.989980536060606,0.664134812298712,0.204664041574770;0.991759461636364,0.679054050392784,0.196443526629633;0.993121761575758,0.694154252342995,0.188439001779935;0.994041833030303,0.709429736461378,0.180722256300012;0.994502779818182,0.724880985557720,0.173377462450791;0.994498941575758,0.740509760647437,0.166492641839155;0.993991486363636,0.756309810346189,0.160212905824302;0.992985247636364,0.772286712379486,0.154629980669400;0.991438210000000,0.788435499056204,0.149931542862865;0.989359350090909,0.804749959302527,0.146244864397980;0.986711400727273,0.821233241660880,0.143703110258317;0.983488164848485,0.837877046489316,0.142439453351283;0.979690508272727,0.854668834730875,0.142448146001543;0.975271192090909,0.871625557374025,0.143738785611683;0.970279664727273,0.888707868358415,0.146051808241278;0.964702926090909,0.905927564523120,0.149010339993564;0.958602670181818,0.923253649231005,0.151796687168694;0.952114072393939,0.940649752191961,0.152924869273177;0.945590474366293,0.958043580545455,0.148864760271971;0.940015097000001,0.975158357000000,0.131325517000000];
fake_parula = [0.208100000000000,0.166300000000000,0.529200000000000;0.211623809500000,0.189780952400000,0.577676190500000;0.212252381000000,0.213771428600000,0.626971428600000;0.208100000000000,0.238600000000000,0.677085714300000;0.195904761900000,0.264457142900000,0.727900000000000;0.170728571400000,0.291938095200000,0.779247619000000;0.125271428600000,0.324242857100000,0.830271428600000;0.0591333333000000,0.359833333300000,0.868333333300000;0.0116952381000000,0.387509523800000,0.881957142900000;0.00595714290000000,0.408614285700000,0.882842857100000;0.0165142857000000,0.426600000000000,0.878633333300000;0.0328523810000000,0.443042857100000,0.871957142900000;0.0498142857000000,0.458571428600000,0.864057142900000;0.0629333333000000,0.473690476200000,0.855438095200000;0.0722666667000000,0.488666666700000,0.846700000000000;0.0779428571000000,0.503985714300000,0.838371428600000;0.0793476190000000,0.520023809500000,0.831180952400000;0.0749428571000000,0.537542857100000,0.826271428600000;0.0640571429000000,0.556985714300000,0.823957142900000;0.0487714286000000,0.577223809500000,0.822828571400000;0.0343428571000000,0.596580952400000,0.819852381000000;0.0265000000000000,0.613700000000000,0.813500000000000;0.0238904762000000,0.628661904800000,0.803761904800000;0.0230904762000000,0.641785714300000,0.791266666700000;0.0227714286000000,0.653485714300000,0.776757142900000;0.0266619048000000,0.664195238100000,0.760719047600000;0.0383714286000000,0.674271428600000,0.743552381000000;0.0589714286000000,0.683757142900000,0.725385714300000;0.0843000000000000,0.692833333300000,0.706166666700000;0.113295238100000,0.701500000000000,0.685857142900000;0.145271428600000,0.709757142900000,0.664628571400000;0.180133333300000,0.717657142900000,0.642433333300000;0.217828571400000,0.725042857100000,0.619261904800000;0.258642857100000,0.731714285700000,0.595428571400000;0.302171428600000,0.737604761900000,0.571185714300000;0.348166666700000,0.742433333300000,0.547266666700000;0.395257142900000,0.745900000000000,0.524442857100000;0.442009523800000,0.748080952400000,0.503314285700000;0.487123809500000,0.749061904800000,0.483976190500000;0.530028571400000,0.749114285700000,0.466114285700000;0.570857142900000,0.748519047600000,0.449390476200000;0.609852381000000,0.747314285700000,0.433685714300000;0.647300000000000,0.745600000000000,0.418800000000000;0.683419047600000,0.743476190500000,0.404433333300000;0.718409523800000,0.741133333300000,0.390476190500000;0.752485714300000,0.738400000000000,0.376814285700000;0.785842857100000,0.735566666700000,0.363271428600000;0.818504761900000,0.732733333300000,0.349790476200000;0.850657142900000,0.729900000000000,0.336028571400000;0.882433333300000,0.727433333300000,0.321700000000000;0.913933333300000,0.725785714300000,0.306276190500000;0.944957142900000,0.726114285700000,0.288642857100000;0.973895238100000,0.731395238100000,0.266647619000000;0.993771428600000,0.745457142900000,0.240347619000000;0.999042857100000,0.765314285700000,0.216414285700000;0.995533333300000,0.786057142900000,0.196652381000000;0.988000000000000,0.806600000000000,0.179366666700000;0.978857142900000,0.827142857100000,0.163314285700000;0.969700000000000,0.848138095200000,0.147452381000000;0.962585714300000,0.870514285700000,0.130900000000000;0.958871428600000,0.894900000000000,0.113242857100000;0.959823809500000,0.921833333300000,0.0948380952000000;0.966100000000000,0.951442857100000,0.0755333333000000;0.976300000000000,0.983100000000000,0.0538000000000000];

% cmocean colormaps author info: 
% This function was written by Chad A. Greene of the Institute for Geophysics at the 
% University of Texas at Austin (UTIG), June 2016, using colormaps created by Kristen
% Thyng of Texas A&M University, Department of Oceanography. More information on the
% cmocean project can be found at http://matplotlib.org/cmocean/. 
% Citing this colormap: 
% If you find an occasion to cite these colormaps for any reason, or if you just want
% some nice beach reading, check out the following paper from the journal Oceanography: 
% Thyng, K.M., C.A. Greene, R.D. Hetland, H.M. Zimmerle, and S.F. DiMarco. 2016. True 
% colors of oceanography: Guidelines for effective and accurate colormap selection. 
% Oceanography 29(3):9?13, http://dx.doi.org/10.5670/oceanog.2016.66.
% MIT License
% Copyright (c) 2021 Chad Greene
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
%colormaps
% cmap = cmocean('ColormapName') returns a 256x3 colormap. ColormapName can be any of
% of the following:
%
%          SEQUENTIAL:                DIVERGING:
%          'thermal'                  'balance'
%          'haline'                   'delta'
%          'solar'                    'curl'
%          'ice'                      'diff'
%          'gray'                     'tarn'
%          'oxy'
%          'deep'                     CONSTANT LIGHTNESS:
%          'dense'                    'phase'
%          'algae'
%          'matter'                   OTHER:
%          'turbid'                   'topo'
%          'speed'
%          'amp'
%          'tempo'
%          'rain'

if get(H.plot_heat,'Value')==1
	if get(H.transparency, 'Value') == 1
		transp = 1;
	elseif get(H.transparency, 'Value') == 2
		transp = 0.75;
	elseif get(H.transparency, 'Value') == 3
		transp = 0.5;
	elseif get(H.transparency, 'Value') == 4
		transp = 0.25;
	elseif get(H.transparency, 'Value') == 5
		transp = 0;
	end
	
	if get(H.colormap, 'Value') == 1
		cmap = cmocean('balance',100);	
	elseif get(H.colormap, 'Value') == 2
		cmap = colormap(viridis);	
	elseif get(H.colormap, 'Value') == 3
		cmap = colormap(jet);
	elseif get(H.colormap, 'Value') == 4
		cmap = colormap(inferno);
	elseif get(H.colormap, 'Value') == 5
		cmap = colormap(magma);
	elseif get(H.colormap, 'Value') == 6
		cmap = colormap(plasma);
	elseif get(H.colormap, 'Value') == 7
		cmap = colormap(fake_parula);	
	elseif get(H.colormap, 'Value') == 8
		cmap = cmocean('delta',100);
	elseif get(H.colormap, 'Value') == 9
		cmap = cmocean('curl',100);
	elseif get(H.colormap, 'Value') == 10
		cmap = cmocean('diff',100);
	elseif get(H.colormap, 'Value') == 11
		cmap = cmocean('tarn',100);
	elseif get(H.colormap, 'Value') == 12
		cmap = cmocean('phase',100);
	elseif get(H.colormap, 'Value') == 13
		cmap = cmocean('topo',100);
	elseif get(H.colormap, 'Value') == 14
		cmap = cmocean('thermal',100);
	elseif get(H.colormap, 'Value') == 15
		cmap = cmocean('haline',100);
	elseif get(H.colormap, 'Value') == 16
		cmap = cmocean('solar',100);
	elseif get(H.colormap, 'Value') == 17
		cmap = cmocean('ice',100);
	elseif get(H.colormap, 'Value') == 18
		cmap = cmocean('gray',100);
	elseif get(H.colormap, 'Value') == 19
		cmap = cmocean('oxy',100);
	elseif get(H.colormap, 'Value') == 20
		cmap = cmocean('deep',100);
	elseif get(H.colormap, 'Value') == 21
		cmap = cmocean('dense',100);
	elseif get(H.colormap, 'Value') == 22
		cmap = cmocean('algae',100);
	elseif get(H.colormap, 'Value') == 23
		cmap = cmocean('matter',100);
	elseif get(H.colormap, 'Value') == 24
		cmap = cmocean('turbid',100);
	elseif get(H.colormap, 'Value') == 25
		cmap = cmocean('speed',100);
	elseif get(H.colormap, 'Value') == 26
		cmap = cmocean('amp',100);
	elseif get(H.colormap, 'Value') == 27
		cmap = cmocean('tempo',100);
	elseif get(H.colormap, 'Value') == 28
		cmap = cmocean('rain',100);
	elseif get(H.colormap, 'Value') == 29
		cmap = colormap(parula);
	elseif get(H.colormap, 'Value') == 30
		cmap = colormap(hsv);
	elseif get(H.colormap, 'Value') == 31
		cmap = colormap(hot);
	elseif get(H.colormap, 'Value') == 32
		cmap = colormap(cool);
	elseif get(H.colormap, 'Value') == 33
		cmap = colormap(spring);
	elseif get(H.colormap, 'Value') == 34
		cmap = colormap(summer);
	elseif get(H.colormap, 'Value') == 35
		cmap = colormap(winter);
	elseif get(H.colormap, 'Value') == 36
		cmap = colormap(gray);
	elseif get(H.colormap, 'Value') == 37
		cmap = colormap(bone);
	elseif get(H.colormap, 'Value') == 38
		cmap = colormap(copper);
	elseif get(H.colormap, 'Value') == 39
		cmap = colormap(pink);
	elseif get(H.colormap, 'Value') == 40
		cmap = colormap(lines);
	elseif get(H.colormap, 'Value') == 41
		cmap = colormap(colorcube);
	elseif get(H.colormap, 'Value') == 42
		cmap = colormap(prism);	
	elseif get(H.colormap, 'Value') == 43
		cmap = colormap(flag);	
	end
		
%{		
1	Balance
2	Viridis
3	Jet
4	Inferno
5	Magma
6	Plasma
7	Fake Parula
8	Delta
9	Curl
10	Diff
11	Tarn
12	Phase
13	Topo
14	Thermal 
15	Haline
16	Solar 
17	Ice 
18	Gray
19	Oxy
20	Deep
21	Dense 
22	Algae
23	Matter
24	Turbid
25	Speed
26	Amp
27	Tempo
28	Rain
29	Parula
30	Hsv
31	Hot
32	Cool
33	Spring
34	Summer
35	Winter
36	Gray
37	Bone
38	Copper
39	Pink
40	Lines
41	Colorcube
42	Prism
43	Flag
	
%}
	
	if get(H.clipmap, 'Value') == 1 && get(H.clipmap, 'Value') ~= 7
		cmap(1:100-str2num(get(H.clip, 'String')),:) = 1;
	end
	if get(H.clipmap, 'Value') == 1 && get(H.colormap, 'Value') == 7
		cmap = colormap(fake_parula);
		cmap(1:round((100-str2num(get(H.clip, 'String')))/100*64),:) = 1;
	end
		round((100-str2num(get(H.clip, 'String')))/100*64)
	colormap(cmap)

	s = surf(X,Y,density,'FaceAlpha',transp,'EdgeColor','none');

	rad_on=get(H.ui_view,'selectedobject');
	switch rad_on
		case H.d2
			view(2)
		case H.d3
			view(3)
	end
	
	shading interp;
end

size = str2num(get(H.size,'String'));

if get(H.marker, 'Value') == 1
	mark = 'o';
elseif get(H.marker, 'Value') == 2
	mark = '+';
elseif get(H.marker, 'Value') == 3
	mark = '*';
elseif get(H.marker, 'Value') == 4
	mark = '.';
elseif get(H.marker, 'Value') == 5
	mark = 'x';
elseif get(H.marker, 'Value') == 6
	mark = 's';	
elseif get(H.marker, 'Value') == 7
	mark = 'd';
elseif get(H.marker, 'Value') == 8
	mark = '^';
elseif get(H.marker, 'Value') == 9
	mark = 'v';	
elseif get(H.marker, 'Value') == 10
	mark = '>';	
elseif get(H.marker, 'Value') == 11
	mark = '<';	
elseif get(H.marker, 'Value') == 12
	mark = 'p';	
elseif get(H.marker, 'Value') == 13
	mark = 'h';	
elseif get(H.marker, 'Value') == 14
	mark = 'none';	
end

if get(H.s_color, 'Value') == 1
	face = 'r';
elseif get(H.s_color, 'Value') == 2
	face = 'g';
elseif get(H.s_color, 'Value') == 3
	face = 'b';
elseif get(H.s_color, 'Value') == 4
	face = 'y';
elseif get(H.s_color, 'Value') == 5
	face = 'm';
elseif get(H.s_color, 'Value') == 6
	face = 'c';	
elseif get(H.s_color, 'Value') == 7
	face = 'w';
elseif get(H.s_color, 'Value') == 8
	face = 'k';
elseif get(H.s_color, 'Value') == 9
	face = 'none';	
end

if get(H.s_edge, 'Value') == 1
	edge = 'r';
elseif get(H.s_edge, 'Value') == 2
	edge = 'g';
elseif get(H.s_edge, 'Value') == 3
	edge = 'b';
elseif get(H.s_edge, 'Value') == 4
	edge = 'y';
elseif get(H.s_edge, 'Value') == 5
	edge = 'm';
elseif get(H.s_edge, 'Value') == 6
	edge = 'c';	
elseif get(H.s_edge, 'Value') == 7
	edge = 'w';
elseif get(H.s_edge, 'Value') == 8
	edge = 'k';
elseif get(H.s_edge, 'Value') == 9
	edge = 'none';	
end

if get(H.plot_scat,'Value')==1 	
	scatter3(data(:,1), data(:,2), ones(length(data(:,1)),1).*max(max(density)) + (ones(length(data(:,1)),1).*max(max(density)))*.05, size, ...
		mark, 'MarkerEdgeColor', edge, 'MarkerFaceColor', face, 'LineWidth', str2num(get(H.edge_t,'String')));
end

if get(H.plot_scat3,'Value')==1 	
	for i = 1:length(data(:,1))		
		tmpx = val2ind(X(1,:),data(i,1));
		tmpy = val2ind(Y(:,1),data(i,2));
		X_index(i,1) = tmpx(1,1);
		Y_index(i,1) = tmpy(1,1);
		clear tmpx
		clear tmpy
	end		
	for i = 1:length(data(:,1))	
		Z(i,1) = density(Y_index(i,1),X_index(i,1));
	end
	scatter3(data(:,1),data(:,2),Z + Z.*0.05, size, mark, 'MarkerEdgeColor', edge, 'MarkerFaceColor', face);
end

if get(H.plot_runmean,'Value')==1 	
	X1 = (data(:,1));
	Y1 = (data(:,2));
	[X_sorted, X_order] = sort(X1);
	Y_sorted = Y1(X_order,:);
	M = movmean(Y_sorted,str2double(get(H.runmean_n,'String')));
	if get(H.runmean_c, 'Value') == 1
		runmean_co = 'r';
	elseif get(H.runmean_c, 'Value') == 2
		runmean_co = 'g';
	elseif get(H.runmean_c, 'Value') == 3
		runmean_co = 'b';
	elseif get(H.runmean_c, 'Value') == 4
		runmean_co = 'y';
	elseif get(H.runmean_c, 'Value') == 5
		runmean_co = 'm';
	elseif get(H.runmean_c, 'Value') == 6
		runmean_co = 'c';	
	elseif get(H.runmean_c, 'Value') == 7
		runmean_co = 'w';
	elseif get(H.runmean_c, 'Value') == 8
		runmean_co = 'k';
	elseif get(H.runmean_c, 'Value') == 9
		runmean_co = 'none';	
	end
	p1 = plot3(X_sorted,M,ones(length(data(:,1)),1).*max(max(density)), 'LineWidth', str2num(get(H.runmean_w,'String')), 'Color', runmean_co);
end

if get(H.plot_runmedian,'Value')==1 	
	X1 = (data(:,1));
	Y1 = (data(:,2));
	[X_sorted, X_order] = sort(X1);
	Y_sorted = Y1(X_order,:);
	M2 = movmedian(Y_sorted,str2double(get(H.runmedian_n,'String')));
	if get(H.runmedian_c, 'Value') == 1
		runmedian_co = 'r';
	elseif get(H.runmedian_c, 'Value') == 2
		runmedian_co = 'g';
	elseif get(H.runmedian_c, 'Value') == 3
		runmedian_co = 'b';
	elseif get(H.runmedian_c, 'Value') == 4
		runmedian_co = 'y';
	elseif get(H.runmedian_c, 'Value') == 5
		runmedian_co = 'm';
	elseif get(H.runmedian_c, 'Value') == 6
		runmedian_co = 'c';	
	elseif get(H.runmedian_c, 'Value') == 7
		runmedian_co = 'w';
	elseif get(H.runmedian_c, 'Value') == 8
		runmedian_co = 'k';
	elseif get(H.runmedian_c, 'Value') == 9
		runmedian_co = 'none';	
	end
	p2 = plot3(X_sorted,M2,ones(length(data(:,1)),1).*max(max(density)), 'LineWidth', str2num(get(H.runmedian_w,'String')), 'Color', runmedian_co);
end

if get(H.plot_poly,'Value')==1 	
	X1 = (data(:,1));
	Y1 = (data(:,2));
	[X_sorted, X_order] = sort(X1);
	Y_sorted = Y1(X_order,:);
	p = polyfit(X_sorted, Y_sorted, str2double(get(H.poly_n,'String')));
	pp = polyval(p, X_sorted);
	if get(H.poly_c, 'Value') == 1
		poly_co = 'r';
	elseif get(H.poly_c, 'Value') == 2
		poly_co = 'g';
	elseif get(H.poly_c, 'Value') == 3
		poly_co = 'b';
	elseif get(H.poly_c, 'Value') == 4
		poly_co = 'y';
	elseif get(H.poly_c, 'Value') == 5
		poly_co = 'm';
	elseif get(H.poly_c, 'Value') == 6
		poly_co = 'c';	
	elseif get(H.poly_c, 'Value') == 7
		poly_co = 'w';
	elseif get(H.poly_c, 'Value') == 8
		poly_co = 'k';
	elseif get(H.poly_c, 'Value') == 9
		poly_co = 'none';	
	end
	p3 = plot3(X_sorted, pp, ones(length(data(:,1)),1).*max(max(density)), 'LineWidth', str2num(get(H.poly_w,'String')), 'Color', poly_co);
end

if get(H.plot_runmeanh,'Value')==1 
	[max_dens, max_dens_ind] = max(density,[],1);
	for i = 1:length(Y(:,1))
		Y2(1,i) = Y(max_dens_ind(1,i),1);
	end
	X2 = [X(1,:)]';
	Y2_movmean = movmean(Y2,str2double(get(H.runmeanh_n,'String')));
	for i = 1:length(Y2)
		tmpy = val2ind(Y(:,1),Y2_movmean(1,i));
		Y2_movmean_idx(1,i) = tmpy(1,1);
		clear tmpy
	end	
	for i = 1:length(Y2_movmean_idx)	
		M3z(i,1) = density(Y2_movmean_idx(1,i),i);
	end
	if get(H.runmeanh_c, 'Value') == 1
		runmeanh_co = 'r';
	elseif get(H.runmeanh_c, 'Value') == 2
		runmeanh_co = 'g';
	elseif get(H.runmeanh_c, 'Value') == 3
		runmeanh_co = 'b';
	elseif get(H.runmeanh_c, 'Value') == 4
		runmeanh_co = 'y';
	elseif get(H.runmeanh_c, 'Value') == 5
		runmeanh_co = 'm';
	elseif get(H.runmeanh_c, 'Value') == 6
		runmeanh_co = 'c';	
	elseif get(H.runmeanh_c, 'Value') == 7
		runmeanh_co = 'w';
	elseif get(H.runmeanh_c, 'Value') == 8
		runmeanh_co = 'k';
	elseif get(H.runmeanh_c, 'Value') == 9
		runmeanh_co = 'none';	
	end
	p4 = plot3(X2,Y2_movmean,M3z + max(M3z)*0.1, 'LineWidth', str2num(get(H.runmeanh_w,'String')), 'Color', runmeanh_co);
end

if get(H.plot_runmedianh,'Value')==1 
	[max_dens, max_dens_ind] = max(density,[],1);
	for i = 1:length(Y(:,1))
		Y2(1,i) = Y(max_dens_ind(1,i),1);
	end
	Y2_movmedian = movmedian(Y2,str2double(get(H.runmedianh_n,'String')));
	for i = 1:length(Y2)
		tmpy = val2ind(Y(:,1),Y2_movmedian(1,i));
		Y2_movmedian_idx(1,i) = tmpy(1,1);
		clear tmpy
	end	
	for i = 1:length(Y2_movmedian_idx)	
		M3z(i,1) = density(Y2_movmedian_idx(1,i),i);
	end
	if get(H.runmedianh_c, 'Value') == 1
		runmedianh_co = 'r';
	elseif get(H.runmedianh_c, 'Value') == 2
		runmedianh_co = 'g';
	elseif get(H.runmedianh_c, 'Value') == 3
		runmedianh_co = 'b';
	elseif get(H.runmedianh_c, 'Value') == 4
		runmedianh_co = 'y';
	elseif get(H.runmedianh_c, 'Value') == 5
		runmedianh_co = 'm';
	elseif get(H.runmedianh_c, 'Value') == 6
		runmedianh_co = 'c';	
	elseif get(H.runmedianh_c, 'Value') == 7
		runmedianh_co = 'w';
	elseif get(H.runmedianh_c, 'Value') == 8
		runmedianh_co = 'k';
	elseif get(H.runmedianh_c, 'Value') == 9
		runmedianh_co = 'none';	
	end
	p5 = plot3(X(1,:),Y2_movmedian,M3z + max(M3z)*0.1, 'LineWidth', str2num(get(H.runmedianh_w,'String')), 'Color', runmedianh_co);
end

if get(H.contour_color, 'Value') == 1
	cont = 'r';
elseif get(H.contour_color, 'Value') == 2
	cont = 'g';
elseif get(H.contour_color, 'Value') == 3
	cont = 'b';
elseif get(H.contour_color, 'Value') == 4
	cont = 'y';
elseif get(H.contour_color, 'Value') == 5
	cont = 'm';
elseif get(H.contour_color, 'Value') == 6
	cont = 'c';	
elseif get(H.contour_color, 'Value') == 7
	cont = 'w';
elseif get(H.contour_color, 'Value') == 8
	cont = 'k';
elseif get(H.contour_color, 'Value') == 9
	cont = 'none';	
end

max_density = max(max(density));
max_density_conf = max_density - max_density*str2num(get(H.conf,'String'))*.01;

if get(H.contour,'Value')==1 
	contour3(X,Y,density,cont, 'LineWidth', str2num(get(H.contour_w,'String')));
end

if get(H.contour_num,'Value')==1 
	contour3(X,Y,density,str2double(get(H.cont_num,'String')),cont,'LineWidth', str2num(get(H.contour_w,'String')));
end

if get(H.contour_vals,'Value')==1 
	contour3(X,Y,density,[max_density_conf max_density_conf],cont, 'LineWidth', str2num(get(H.contour_w,'String')));
end

axis([str2double(get(H.xmin,'String')),str2double(get(H.xmax,'String')),str2double(get(H.ymin,'String')),str2double(get(H.ymax,'String'))]);

set(H.axes1,'FontSize',str2num(get(H.fontsize,'String')));

if get(H.bold,'Value') == 1
	set(H.axes1,'FontWeight','bold');
end
	
view(az);

set(H.azim,'String',round(az(1,1),1));
set(H.elev,'String',round(az(1,2),1));

if get(H.d2,'Value') == 1
	view(2)
end

xlabel(get(H.x_lab,'String'));
ylabel(get(H.y_lab,'String'));
if get(H.d3,'Value') == 1
	zlabel(get(H.z_lab,'String'));
end

DM_Slider = str2num(get(H.dms,'String'));

Epsilon_plot = [16.5,14.6,0,15.6,0;15.0,13.0,500,14.0,0;13.4,11.5,1000,12.5,0;11.9,9.9,1500,10.9,0;10.3,8.3,2000,9.3,0; ...
	8.7,6.7,2500,7.7,0;5.4,3.4,3500,4.4,0;3.7,1.7,4000,2.7,0;2.0,0.0,4500,1.0,0];

Decay_const_176Lu = 0.01867; %176Lu decay constant (Scherer et al., 2001) 1.867*10^-11 (same as Soderland et al., 2004)
DM_176Hf_177Hf = 0.283225; %Vervoort and Blichert-Toft, 1999
DM_176Lu_177Hf = 0.0383; %Vervoort and Blichert-Toft, 1999
BSE_176Hf_177Hf = 0.282785; %Bouvier et al. 2008
BSE_176Lu_177Hf = 0.0336; %Bouvier et al. 2008

t_176Hf_177Hf = DM_176Hf_177Hf - (DM_176Lu_177Hf*(exp(Decay_const_176Lu*DM_Slider/1000)-1));

CHURt = BSE_176Hf_177Hf - (BSE_176Lu_177Hf*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
 
DMpoint_Epsi_x = DM_Slider;
DMpoint_Epsi_y = 10000*((t_176Hf_177Hf/CHURt)-1);

Y0_Evol_DM_176Lu_177Hf = t_176Hf_177Hf + (0.0115*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
Y0_u_Evol_DM_176Lu_177Hf = t_176Hf_177Hf + (0.0193*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
Y0_l_Evol_DM_176Lu_177Hf = t_176Hf_177Hf + (0.0036*(exp(Decay_const_176Lu*DM_Slider/1000)-1));
Ys_Evol_DM_176Lu_177Hf = t_176Hf_177Hf;

Y0_Epsi_DM_176Lu_177Hf = 10000*((Y0_Evol_DM_176Lu_177Hf/BSE_176Hf_177Hf)-1);
Y0_u_Epsi_DM_176Lu_177Hf = 10000*((Y0_u_Evol_DM_176Lu_177Hf/BSE_176Hf_177Hf)-1);
Y0_l_Epsi_DM_176Lu_177Hf = 10000*((Y0_l_Evol_DM_176Lu_177Hf/BSE_176Hf_177Hf)-1);
Ys_Epsi_DM_176Lu_177Hf = DMpoint_Epsi_y;

if get(H.evol_color, 'Value') == 1
	evo = 'r';
elseif get(H.evol_color, 'Value') == 2
	evo = 'g';
elseif get(H.evol_color, 'Value') == 3
	evo = 'b';
elseif get(H.evol_color, 'Value') == 4
	evo = 'y';
elseif get(H.evol_color, 'Value') == 5
	evo = 'm';
elseif get(H.evol_color, 'Value') == 6
	evo = 'c';	
elseif get(H.evol_color, 'Value') == 7
	evo = 'w';
elseif get(H.evol_color, 'Value') == 8
	evo = 'k';
elseif get(H.evol_color, 'Value') == 9
	evo = 'none';	
end

if get(H.chur, 'Value') == 1
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,5),ones(9,1).*max(max(density)),evo,'LineWidth',str2num(get(H.evo_t,'String')))
end

if get(H.DM, 'Value') == 1
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,4),ones(9,1).*max(max(density)),evo,'LineWidth',str2num(get(H.evo_t,'String')))
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,1),ones(9,1).*max(max(density)),strcat('--',evo),'LineWidth',str2num(get(H.evo_t,'String')))
	plot3(Epsilon_plot(:,3),Epsilon_plot(:,2),ones(9,1).*max(max(density)),strcat('--',evo),'LineWidth',str2num(get(H.evo_t,'String')))
end

if get(H.Y, 'Value') == 1
	plot3([0 DM_Slider],[Y0_u_Epsi_DM_176Lu_177Hf, Ys_Epsi_DM_176Lu_177Hf],ones(2,1).*max(max(density)), 'Color', evo, 'LineWidth', str2num(get(H.evo_t,'String')))
end
if get(H.Yu, 'Value') == 1
	plot3([0 DM_Slider],[Y0_Epsi_DM_176Lu_177Hf, Ys_Epsi_DM_176Lu_177Hf],ones(2,1).*max(max(density)), 'Color', evo, 'LineWidth', str2num(get(H.evo_t,'String')))
end
if get(H.Yl', 'Value') == 1
	plot3([0 DM_Slider],[Y0_l_Epsi_DM_176Lu_177Hf, Ys_Epsi_DM_176Lu_177Hf],ones(2,1).*max(max(density)), 'Color', evo, 'LineWidth', str2num(get(H.evo_t,'String')))
end

hold off

[file,path] = uiputfile('*.eps','Save file');

if get(H.contour,'Value') == 1 || get(H.contour_num,'Value') == 1 || get(H.contour_vals,'Value') == 1 && get(H.plot_heat,'Value') == 0 && get(H.plot_scat,'Value') == 0 && get(H.plot_scat3,'Value') == 0
	print(FIG,'-depsc','-painters',[path file]);
	epsclean([path file]); 
elseif get(H.plot_heat,'Value') == 1 
	print(FIG,'-depsc',[path file]);
else
	print(FIG,'-depsc','-painters',[path file]);
end








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function copytable_Callback(hObject, eventdata, H)
data = get(H.uitable1, 'Data');
copy(data);

function pastetotable_Callback(hObject, eventdata, H)
data = paste;
set(H.uitable1, 'Data', data);
plot_Callback(hObject, eventdata, H)
